#!/bin/bash

#  _               _         ____  ____  _
# | |__   __ _ ___| |__     |  _ \/ ___|/ |
# | '_ \ / _` / __| '_ \    | |_) \___ \| |
# | |_) | (_| \__ \ | | |   |  __/ ___) | |
# |_.__/ \__,_|___/_| |_|___|_|   |____/|_|
#                      |_____|

# bash script to setup and configure my bash prompt. The bash prompt is a direct
# fork of the bash prompt used by default in CMDer, with some mild enhancements.
#
# Default format is:
#
# username@hostname path (git-branch)
# λ
#
# Environment Variables:
#  PS1_INLINE:      when set to 1, bash prompt won't spread over multiple lines.
#  PS1_COLOR_CODED: when set to 1, bash prompt will change color depending on the
#                   exit code of the last command.
#

case "$TERM" in
    dumb)
        PS1="> " # dumb terminal used by emacs tramp
        ;;
    xterm*|rxvt*|eterm*|screen*|cygwin*|emacs*)
        git_prompt_path="$scripts_path/.ps1/git-prompt.sh"

        if ! hash __git_ps1 1>/dev/null 2>&1; then
            if [ -f "$git_prompt_path" ]; then
                . "$git_prompt_path" # source git prompt script to define __git_ps1
            else
                echo "bash_ps1(error) : git prompt script not found: $git_prompt_path" >&2
                __git_ps1() { echo ""; } # when not given, git PS1 just shows an empty string
            fi
        fi

        _pre_prompt() {
            # See For More: https://misc.flogisoft.com/bash/tip_colors_and_formatting
            # Color Codes: \[\e[0;%dm\] % (code)
            #     * DIM               ~> 0
            #     * BRIGHT            ~> 1 (for colors in 30s)
            #     * BOLD              ~> 1 (for colors in 90s)
            #
            #     * BLACK             ~> 30
            #     * RED               ~> 31
            #     * GREEN             ~> 32
            #     * YELLOW            ~> 33
            #     * LIGHT_BLUE        ~> 34
            #     * PURPLE            ~> 35
            #     * CYAN              ~> 36
            #     * WHITE             ~> 37
            #     * RESTORE           ~> 39
            #     * DARK GREY         ~> 90
            #     * LIGHT RED         ~> 91
            #     * LIGHT GREEN       ~> 92
            #     * LIGHT YELLOW      ~> 93
            #     * LIGHT BLUE        ~> 94
            #     * LIGHT MAGENTA     ~> 95
            #     * LIGHT CYAN        ~> 96
            #     * LIGHT WHITE (WTF) ~> 97

            local previous_exit_code="$?" user_color="\[\e[0;32m\]"

            if [ "${PS1_COLOR_CODED:-0}" = 1 ]; then
                case "$previous_exit_code" in
                    1) # catchall for general errors
                        user_color="\[\e[1;31m\]"
                    ;;
                    2) # misuse of shell builtins
                        user_color="\[\e[1;31m\]"
                    ;;
                    126) # command invoked cannot execute
                        user_color="\[\e[1;31m\]"
                    ;;
                    127) # command not found
                        user_color="\[\e[1;34m\]"
                    ;;
                    128) # invalid argument to exit
                        user_color="\[\e[1;31m\]"
                    ;;
                    129) # SIGHUP
                        user_color="\[\e[1;31m\]"
                    ;;
                    130) # SIGINT
                        user_color="\[\e[1;33m\]"
                    ;;
                    131) # SIGQUIT
                        user_color="\[\e[1;31m\]"
                    ;;
                    132) # SIGILL
                        user_color="\[\e[1;31m\]"
                    ;;
                    133) # SIGTRAP
                        user_color="\[\e[1;31m\]"
                    ;;
                    134) # SIGABRT
                        user_color="\[\e[1;31m\]"
                    ;;
                    135) # SIGBUS
                        user_color="\[\e[1;31m\]"
                    ;;
                    136) # SIGFPE
                        user_color="\[\e[1;31m\]"
                    ;;
                    137) # SIGKILL
                        user_color="\[\e[1;35m\]"
                    ;;
                    255) # Exit Status Out Of Range
                        user_color="\[\e[1;31m\]"
                    ;;
                esac
            fi

            local ps1_pre="$user_color\u@\h \[\e[33m\]\w\[\e[1;34m\]\$(__git_ps1)" ps1_post="\[\e[0m\]λ "
            if [ "${PS1_INLINE:-0}" = 1 ]; then ps1_pre="$ps1_pre "; else ps1_pre="$ps1_pre"$'\n'; fi
            PS1="$ps1_pre$ps1_post\[\e[0m\]"

            return "$previous_exit_code"
        }

        export PROMPT_COMMAND=_pre_prompt
        ;;
esac
