#!/bin/sh
# Helper to assign $fs (the current lf selection) to the contents of the
# cwd when it's otherwise unassigned. It also respects the value of the
# hiddenfiles option.
#
# shellcheck disable=SC2154

_lf_hidden_filter() {
  dir="$1"
  # shellcheck disable=SC2154
  if [ "$lf_hidden" = "false" ]; then
    # not efficient but it works :shrug_tone4:
    #
    # we strip out the base directory, then recurse through all
    # subdirectories removing any that match a pattern in our hidden
    # files globs. We then re-prepend the base directory back.
    #
    # Removing the base directory is done to make sure a path
    # earlier in our cwd isn't hidden... because if it was then all
    # files below it would've been ignored implicitly.
    #
    # For example if $dir is node_modules/foo/ we'd normally end up
    # ignoring everything within foo due to node_modules being in
    # hiddenfiles, but seeing as we're already there we shouldn't
    # ignore it :-)
    awk -v cwd="$dir" '{ print(substr($0, length(cwd)+2)) }' |
      filter-globs -v -p "$lf_hiddenfiles" -ba |
      awk -v cwd="$dir" '{ printf("%s/%s\n", cwd, $0) }'
  else
    cat
  fi
}

fs() {
  if [ -z "$fs" ]; then
    dir=$(dirname "$f")
    find "$dir" -mindepth 1 "$@" |
      sort -V |
      _lf_hidden_filter "$dir"
    unset dir
  else
    echo "$fs"
  fi
}

# Same as fs except it always recurses down.
#
# If there are any marked files they are recursed into exclusively.
fsr() {
  if [ -n "$fs" ]; then
    for it in $fs; do
      if [ -f "$it" ]; then
        echo "$it"
        continue
      fi

      dir=$(dirname "$it")
      find "$it" -mindepth 1 "$@" |
        _lf_hidden_filter "$dir"
    done |
      sort -V
  else
    fs "$@"
  fi
}
