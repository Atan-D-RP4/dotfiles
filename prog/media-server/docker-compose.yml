---
version: "1"
services:
  ###############################################################################
  #                                 Proxy Server                                #
  ###############################################################################

  caddy:
    build:
      context: ./caddy
    environment:
      SITE_ADDRESS: localhost
    ports:
      - "80:80"
      # SSL ports needed to be able to route through HTTPs.
      - "443:443"
      - "443:443/udp"
    volumes:
      - $PWD/caddy:/etc/caddy
      # We put data into $XDG_CONFIG_HOME because it should be persisted.
      # It may contain letsencrypt certificates or other configurations
      # that you don't want to be removed.
      - $XDG_CONFIG_HOME/media-server/caddy/data:/data
      - $XDG_CONFIG_HOME/media-server/caddy/config:/config

  ###############################################################################
  #                                 Dashboard                                   #
  ###############################################################################

  heimdall:
    image: lscr.io/linuxserver/heimdall:latest
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: Europe/London
    volumes:
      - $XDG_CONFIG_HOME/media-server/heimdall:/config
    restart: unless-stopped

  ###############################################################################
  #                                 Media Server                                #
  ###############################################################################

  jellyfin:
    build:
      args:
        DOTNET_VERSION: '6.0'
      context: ./jellyfin
    depends_on:
      - caddy
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: Europe/London
    # Enable to support service and client discovery.
    # ports:
    #   - 7359:7359/udp
    #   - 1900:1900/udp
    restart: unless-stopped
    volumes:
      - $XDG_CACHE_HOME/media-server/jellyfin:/cache
      - $XDG_CONFIG_HOME/media-server/jellyfin:/config
      - $XDG_MEDIA_HOME/content:/media/content:ro

  navidrome:
    depends_on:
      - caddy
    environment:
      ND_DEFAULTTHEME: Spotify-ish
      ND_ENABLETRANSCODINGCONFIG: true
      ND_PROMETHEUS_ENABLED: true
      ND_SCANSCHEDULE: "@every 1h"
    image: deluan/navidrome:latest
    restart: unless-stopped
    user: $PUID:$PGID
    volumes:
      - $XDG_CONFIG_HOME/media-server/navidrome:/data
      - $XDG_MEDIA_HOME/content/music:/music:ro

  ###############################################################################
  #                              Bittorrent Daemon                              #
  ###############################################################################

  transmission:
    build:
      context: ./transmission
    depends_on:
      - caddy
    container_name: transmission
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: Europe/London
      TRANSMISSION_HOME: /config
      # These are referenced in the watcher.json configuration.
      XDG_DOWNLOAD_DIR: /downloads
      XDG_MEDIA_HOME: /media
    volumes:
      - $XDG_CONFIG_HOME/media-server/transmission:/config
      - $PWD/transmission/scripts:/scripts
      # We mount XDG downloads separate from media downloads. This way if I
      # need to download anything through tor that's unrelated to my media
      # server I can do so in my regular downloads directory.
      - $XDG_DOWNLOAD_DIR:/downloads
      - $XDG_MEDIA_HOME/downloads:/media/downloads

  ###############################################################################
  #                                Media Indexer                                #
  ###############################################################################

  lidarr:
    # Music.
    container_name: lidarr
    depends_on:
      - caddy
      - prowlarr
      - transmission
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: Europe/London
    image: lscr.io/linuxserver/lidarr:latest
    restart: unless-stopped
    volumes:
      - $XDG_CONFIG_HOME/media-server/lidarr:/config
      - $XDG_MEDIA_HOME:/media

  sonarr:
    # TV shows.
    container_name: sonarr
    depends_on:
      - caddy
      - prowlarr
      - transmission
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: Europe/London
    image: lscr.io/linuxserver/sonarr:latest
    restart: unless-stopped
    volumes:
      - $XDG_CONFIG_HOME/media-server/sonarr:/config
      # sonarr will move files between my downloads and media directories. To make
      # this process as quick as possible we give it access to the media root
      # directory. Once a download completes it can hardlink it to the content
      # directory and once seeding finishes it can disable or delete the content in
      # the download directory.
      - $XDG_MEDIA_HOME:/media

  radarr:
    # Movies.
    container_name: radarr
    depends_on:
      - caddy
      - prowlarr
      - transmission
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: Europe/London
    image: lscr.io/linuxserver/radarr:latest
    restart: unless-stopped
    volumes:
      - $XDG_CONFIG_HOME/media-server/radarr:/config
      - $XDG_MEDIA_HOME:/media

  readarr:
    # Books
    container_name: readarr
    depends_on:
      - caddy
      - prowlarr
      - transmission
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: Europe/London
    image: lscr.io/linuxserver/readarr:develop
    restart: unless-stopped
    volumes:
      - $XDG_CONFIG_HOME/media-server/readarr:/config
      - $XDG_MEDIA_HOME:/media

  shoko:
    # Anime
    container_name: shoko
    depends_on:
      - caddy
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: Europe/London
    image: shokoanime/server:latest
    restart: unless-stopped
    volumes:
      - $XDG_CONFIG_HOME/media-server/shoko:/home/shoko/.shoko/
      - $XDG_MEDIA_HOME:/media

  ###############################################################################
  #                                   Trackers                                  #
  ###############################################################################

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:develop
    container_name: prowlarr
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: Europe/London
    restart: unless-stopped
    volumes:
      - $XDG_CONFIG_HOME/media-server/prowlarr:/config
