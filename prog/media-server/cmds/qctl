#!/usr/bin/env python3
"""
Interactively select on run commands on torrents controlled by qbittorrent.
"""
import asyncio
import enum
import functools
import logging
import math
import os
import pathlib
import shlex
import subprocess
import sys
import tempfile
from typing import Set

import click
import pandas as pd
from mohkale.torutils import backend

try:
    from hurry.filesize import size
except ImportError:

    def size(b):
        """Human readable file-size conversion"""
        return str(b) + "B"


BACKEND = backend.TorrentBackend.QBITTORRENT


class _QbittorrentStatus(enum.Enum):
    ERROR = "error"
    MISSING_FILES = "missingFiles"
    UPLOADING = "uploading"
    PAUSED_COMPLETE = "pausedUP"
    QUEUED_COMPLETE = "queuedUP"
    STALLED_COMPLETE = "stalledUP"
    CHECKING_COMPLETE = "checkingUP"
    FORCED_COMPLETE = "forcedUP"
    ALLOCATING = "allocating"
    DOWNLOADING = "downloading"
    METADATA_DOWNLOADING = "metaDL"
    PAUSED_DOWNLOADING = "pausedDL"
    QUEUED_DOWNLOADING = "queuedDL"
    STALLED_DOWNLOADING = "stalledDL"
    CHECKING_DOWNLOADING = "checkingDL"
    FORCED_DOWNLOADING = "forcedDL"
    CHECKING_RESUME_DATA = "checkingResumeData"
    MOVING = "moving"
    UNKNOWN = "unknown"

    def format(self):
        QT = _QbittorrentStatus
        try:
            return {
                QT.ERROR: "Error",
                QT.MISSING_FILES: "MissingFiles",
                QT.UPLOADING: "Seeding",
                QT.PAUSED_COMPLETE: "Paused",
                QT.QUEUED_COMPLETE: "Queued",
                QT.STALLED_COMPLETE: "Stalled",
                QT.CHECKING_COMPLETE: "Checking",
                QT.FORCED_COMPLETE: "Seeding",
                QT.ALLOCATING: "Allocating",
                QT.DOWNLOADING: "Downloading",
                QT.METADATA_DOWNLOADING: "Metadata",
                QT.PAUSED_DOWNLOADING: "Paused",
                QT.QUEUED_DOWNLOADING: "Queued",
                QT.STALLED_DOWNLOADING: "Stalled",
                QT.CHECKING_DOWNLOADING: "Checking",
                QT.FORCED_DOWNLOADING: "Downloading",
                QT.CHECKING_RESUME_DATA: "Checking",
                QT.MOVING: "Moving",
                QT.UNKNOWN: "Unknown",
            }[self]
        except KeyError:
            return str(state)


def _render_frame(df):
    name_size = df["name"].map(len).max()
    formatted = df.to_string(
        columns=[
            "infohash_v1",
            "priority",
            "progress",
            "size",
            "dlspeed",
            "upspeed",
            "state",
            "name",
        ],
        header=False,
        index=False,
        index_names=False,
        justify="left",
        formatters={
            "name": f" {{:<{name_size}}}".format,
            "size": size,
            "dlspeed": lambda x: size(x) + "/s",
            "upspeed": lambda x: size(x) + "/s",
            "progress": lambda it: f"{int(100 * it)}%",
            "priority": lambda priority: "-" if priority == 0 else str(priority),
            "state": _QbittorrentStatus.format,
        },
        max_rows=math.inf,
        max_cols=math.inf,
        line_width=math.inf,
    )
    return "\n".join(it.rstrip() for it in formatted.splitlines())


def _fzf(cands, *fzf_args):
    """Pass cands interactively to a fzf process and return chosen ones.
    Adapted from [[https://github.com/nk412/pyfzf/blob/master/pyfzf/pyfzf.py][pyfzf]].
    """
    with tempfile.NamedTemporaryFile() as output_fd:
        with tempfile.NamedTemporaryFile() as input_fd:
            input_fd.write(cands.encode())
            input_fd.flush()
            cmd = f"cat {shlex.quote(input_fd.name)} |\
                    {shlex.join(fzf_args)} > {shlex.quote(output_fd.name)}"
            p = subprocess.run(["sh", "-c", cmd])
            if not p.returncode == 0:
                logging.warning("fzf exited with non-zero exit code: %d", p.returncode)
                return []
        return [line.decode().strip(os.linesep) for line in output_fd.readlines()]


async def _select(torrents, *fzf_args):
    lines = _fzf(
        _render_frame(torrents),
        *fzf_args,
        "--delimiter",
        " ",
        "--with-nth",
        "2..",
        "--multi",
    )
    hashes = [line[: line.find(" ")] for line in lines]
    return torrents.loc[hashes]


async def _get_torrents(client, ids=None):
    resp = client._client.torrents_info(torrent_hashes=ids)
    torrents = pd.DataFrame(resp).set_index("hash")

    torrents.sort_index(inplace=True)

    def sort_key(series):
        series[series == 0] = math.inf
        return series

    torrents.sort_values("priority", inplace=True, key=sort_key)
    torrents["state"] = torrents["state"].map(_QbittorrentStatus)

    return torrents


def _click_coro_wrapper(f):
    @functools.wraps(f)
    def wrapper(*args, **kwargs):
        return asyncio.run(f(*args, **kwargs))

    return wrapper


def _run_client_command_callback(command, **kwargs):
    async def callback(_client, selected_torrents):
        return command(torrent_hashes=selected_torrents.index.to_list(), **kwargs)

    return callback


def _status_filter(*acceptable_filters, exclude: bool = False):
    filter_set = set(acceptable_filters)

    def filter_callback(torrents):
        filtered = torrents["state"].isin(filter_set)
        if exclude:
            filtered = -filtered
        return filtered

    return filter_callback


async def _act_on_torrents_cmd(
    ctx,
    client,
    callback,
    prompt,
    no_torrent_msg="No torrents found",
    torrent_filter=None,
) -> bool:
    torrents = await _get_torrents(client)
    if torrent_filter is not None:
        torrents = torrents[torrent_filter(torrents)]
    if len(torrents) == 0:
        logging.warning(no_torrent_msg)
        return True

    selected_torrents = await _select(torrents, *ctx.obj["fzf"], "--prompt", prompt)
    if len(selected_torrents) == 0:
        logging.warning("No torrents selected, skipping remaining actions")
        return True

    return await callback(client, selected_torrents)


@click.group()
@click.option("--log-level", type=lambda l: getattr(logging, l.upper()), default="INFO")
@click.option("--fzf", metavar="CMD", default="fzf")
@click.pass_context
def cli(ctx, log_level: int, fzf: str):
    try:
        # pylint: disable=ungrouped-imports
        from mohkale.pylog.config import use_config as use_logging_config
    except ImportError:
        logging.basicConfig(level=log_level)
    else:
        use_logging_config("qctl", level=log_level)

    ctx.obj = {
        "fzf": [fzf, "--reverse", "--no-hscroll"],
    }


@cli.command()
@_click_coro_wrapper
async def ls():
    async with BACKEND.client() as client:
        print(_render_frame(await _get_torrents(client)))


@cli.command()
@click.pass_context
@_click_coro_wrapper
async def select(ctx):
    async with BACKEND.client() as client:
        selected_torrents = await _select(
            await _get_torrents(client),
            *ctx.obj["fzf"],
            "--prompt",
            "Select torrents: ",
        )
        for id_ in selected_torrents.index.to_list():
            print(id_)


@cli.command()
@click.argument("dest", type=pathlib.Path)
@click.pass_context
@_click_coro_wrapper
async def move(ctx, dest: pathlib.Path):
    async with BACKEND.client() as client:
        return await _act_on_torrents_cmd(
            ctx,
            client,
            _run_client_command_callback(
                client._client.torrents_set_location, location=str(dest)
            ),
            f"Move torrents to {dest}: ",
        )


@cli.command()
@click.option("-n", "--now", is_flag=True, show_default=True, help="Force start now")
@click.pass_context
@_click_coro_wrapper
async def start(ctx, now: bool):
    filtered_statuses = [
        _QbittorrentStatus.PAUSED_DOWNLOADING,
        _QbittorrentStatus.PAUSED_COMPLETE,
    ]
    if now:
        filtered_statuses.extend(
            [
                _QbittorrentStatus.QUEUED_COMPLETE,
                _QbittorrentStatus.QUEUED_DOWNLOADING,
            ]
        )

    async with BACKEND.client() as client:
        return await _act_on_torrents_cmd(
            ctx,
            client,
            _run_client_command_callback(
                client._client.torrents_set_force_start
                if now
                else client._client.torrents_resume
            ),
            "Start torrents" + (" now" if now else "") + ": ",
            torrent_filter=_status_filter(*filtered_statuses),
        )


@cli.command()
@click.pass_context
@_click_coro_wrapper
async def pause(ctx):
    async with BACKEND.client() as client:
        return await _act_on_torrents_cmd(
            ctx,
            client,
            _run_client_command_callback(client._client.torrents_pause),
            "Pause torrents: ",
            torrent_filter=_status_filter(
                _QbittorrentStatus.DOWNLOADING,
                _QbittorrentStatus.STALLED_DOWNLOADING,
                _QbittorrentStatus.UPLOADING,
                _QbittorrentStatus.QUEUED_COMPLETE,
                _QbittorrentStatus.QUEUED_DOWNLOADING,
            ),
        )


@cli.command()
@click.option(
    "-f", "--force", is_flag=True, show_default=False, help="Remove files as well as torrent"
)
@click.pass_context
@_click_coro_wrapper
async def remove(ctx, force: bool):
    async with BACKEND.client() as client:
        return await _act_on_torrents_cmd(
            ctx,
            client,
            _run_client_command_callback(
                client._client.torrents_delete, delete_files=force
            ),
            "Remove" + (" and delete" if force else "") + " torrents: ",
        )


@cli.command()
@click.pass_context
@_click_coro_wrapper
async def queue_top(ctx):
    async with BACKEND.client() as client:
        return await _act_on_torrents_cmd(
            ctx,
            client,
            _run_client_command_callback(client._client.torrents_top_priority),
            "Move to bottom of queue: ",
        )


@cli.command()
@click.pass_context
@_click_coro_wrapper
async def queue_bottom(ctx):
    async with BACKEND.client() as client:
        return await _act_on_torrents_cmd(
            ctx,
            client,
            _run_client_command_callback(client._client.torrents_bottom_priority),
            "Move to bottom of queue: ",
        )

@cli.command()
@click.pass_context
@_click_coro_wrapper
async def verify(ctx):
    async with BACKEND.client() as client:
        return await _act_on_torrents_cmd(
            ctx,
            client,
            _run_client_command_callback(client._client.torrents_recheck),
            "Recheck torrents: ",
        )


if __name__ == "__main__":
    cli()
