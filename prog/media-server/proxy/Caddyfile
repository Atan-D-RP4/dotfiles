# Caddy media server configuration.
#
# Environment variables
# ---------------------
# SITE_ADDRESS
#   Default top-level address that Caddy should route to. If unset we default
#   to localhost. Any media-server specific services such as jellyfin or sonarr
#   will be accessible as a sub-domain of this address. For example
#   jellyfin.localhost.
#
# MEDIA_SERVER_HOST
#   The in-container hostname that media-server requests should be routed to. This
#   should default to the hostname of the container the service is running under.
#   Setting this allows you to run all service containers in the same network (for
#   example to support VPN routing).
#
# JELLYFIN_HOST
#   Jellyfin service hostname. This is distinct from MEDIA_SERVER_HOST because
#   Jellyfin could be mounted into the host network for DLNA support.

# ┌────────────────┐
# │ Global Options │
# └────────────────┘

# {
# 	log {
# 		level debug
# 	}
# }

import /etc/caddy/local.d/Caddyfile.global

# ┌────────────────┐
# │    Snippets    │
# └────────────────┘

(error_pages) {
	#(status_code)
	reverse_proxy error-pages:8080 {
		replace_status {args[0]}

		header_up X-Host {upstream_hostport}
		header_up X-Code {args[0]}
		header_up X-Request-Id {http.request.uuid}
	}
}

(service_proxy_to) {
	#(service, TLD, service_host, port)
	{args[0]}.{args[1]} {
		# authorize with guests_policy
		reverse_proxy {args[2]}:{args[3]}
		handle_errors 5xx {
			import error_pages {err.status_code}
		}
	}
}

(authorized_service_proxy_to) {
	#(service, TLD, service_host, port)
	{args[0]}.{args[1]} {
		import authelia_forward_auth {args[1]}
		reverse_proxy {args[2]}:{args[3]}
		handle_errors 5xx {
			import error_pages {err.status_code}
		}
	}
}

import /etc/caddy/local.d/Caddyfile.snippets

# ┌────────────────┐
# │     Routes     │
# └────────────────┘

import /etc/caddy/config.d/Caddyfile.services         {$SITE_ADDRESS} service_proxy_to
import /etc/caddy/config.d/Caddyfile.private-services {$SITE_ADDRESS} service_proxy_to
import /etc/caddy/local.d/Caddyfile.routes
