#!/usr/bin/env bash
# Usage: sxiv-ls FILE [...FILES]
#
# Invoke [[man:nsxiv][sxiv]] on a file or list of files.
#
# Depending on the number of arguments this either opens sxiv on all files
# in a directory or only the image files passed to this process directly.
# When only one image is given the former is done and when more than one is
# given then the latter is done.
#
# This allows sxiv to behave like the classic windows image viewer.

set -o noglob

print_usage() {
  echo "Usage: sxiv-ls [-h] [-a] FILES [...FILES]"
}

print_help() {
  print_usage
  cat <<EOF

  View images through sxiv, opening all images in the cwd of the
  first file (ordered naturally) and selecting the first image
  when only one image is selected.

Optional arguments
  -h  Show this help message and exit.
  -a  Read all files in a directory, not just images.
EOF
}

search_flags=( -iregex '.*\.\(jpe?g\|png\|gif\|webp\|tiff\|bmp\)$' )                       # Used to select images in a directory
while getopts 'ha' OPTION; do
  case "$OPTION" in
    a) search_flags=( ) ;;
    h) print_help
       exit 0 ;;
    \?) print_usage >&2
        exit 1 ;;
  esac
done

num=1
if [ "$#" -gt 1 ]; then
  files=$(printf "%s\n" "$@")
else
  if ! [ -e "$1" ]; then
    echo "sxiv-ls: error: File to open doesn't exist." >&2
    exit 1
  fi

  num_f=$(mktemp)
  trap '\rm -f '"$num_f" EXIT

  files=$(
    find -L "$(dirname "$1")" \
          -mindepth 1 -maxdepth 1 -type f "${search_flags[@]}" |
      sort -V |
      awk -v current="$1" \
          -v num_file="$num_f" \
          -e '{ print $0; count++ }' \
          -e '$0 == current { print count > num_file }')

  read -r num < "$num_f"
  [ -z "$num" ] && num=1
  rm -f "$num_f"
fi

exec nsxiv -i -n "$num" <<< "$files"
