# Root git configuration file -*- gitconfig -*-
#
# Post install suggestions for specific repos:
#   git maintenance start
#     Sets up cron/systemd hooks to run maintenance tasks on cloned git repos.
#   git config core.fsmonitor true
#     Git commands like status will spawn a daemon that monitors for filesystem
#     changes to optimise future command invocations.

[user]
	name = Chaitanya Dubakula
	email = chaitanyarp4@gmail.com

[init]
	# For consistency I still default to master but I'll switch to main once
	# git itself does. This is currently being tracked [[https://lore.kernel.org/git/f853fa946f5840518577584a5b8c51660da06928.1605221040.git.gitgitgadget@gmail.com/][here]].
	defaultBranch = master

[core]
	autocrlf = input
		# Convert CRLF to LF when commiting changes back. Useful for when you clone
		# a repo on windows, make changes and try to commit it back without the CRLF
		# line endings showing up as changes.

[filter "lfs"]
	# Configure [[man:git-lfs][git-lfs]]. A git plugin that simplifies commiting and storage of large
	# binary files such as images.
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true

# --word-diff default
[diff]
	renames = true
	mnemonicPrefix = true
	colorMoved = plain
	algorithm = histogram
	tool = nvimdiff

[diff "gpg"]
	# Auto decrypt gpg encrypted files when inspecting diffs.
	textconv = gpg --no-tty --decrypt

[fetch]
	# Automatically fetch checked-out submodules when fetching the parent repo.
	recurseSubmodules = on-demand
	prune = true
	pruneTags = true
	all = true

[push]
	# Automatically push checked-out submodules when pushing the parent repo.
	recurseSubmodules = on-demand
	autoSetupRemote = true
	followTags = true
	default = simple

[pull]
	# Prevent merge conflicts when running [[man:git-pull][git pull]], just failing the pull
	# altogether but keeping the newly fetched changes ready for a following
	# merge or rebase.
	ff = only
	rebase = true

[rebase]
	# Automatically rebase any changes when pulling from a remote repository.
	autostash = true
	autosquash = true
	interactive = preserve
	merge = true
	autoupdate = true

[merge]
	conflictstyle = zdiff3

[alias]
	# Git aliases are shortcuts that can be invoked directly from the base git
	# command. For example `git c` expands to `git commit`.

	# Shortcuts for core commands.
	c  = commit
	s  = status -s
	a  = add
	b  = branch
	cl = !dot-git-clone
	d  = diff
	l  = log --oneline --graph --all
	ch = checkout
	blame = blame -w -M -C -C -C

	# Mini git scripts as shortcuts.
	rcls    = config --list
	unstage = reset HEAD --
	undo    = reset HEAD~

	# Git related shell commands interfaced through git directly.
	z                = !git-fzlog
	permission-reset = !git diff -p -R | grep -E \"^(diff|(old|new) mode)\" | git apply

[format]
	# Automatically generate a cover-letter when creating a patch series.
	coverletter = auto

[column]
	# Automatically show various ui elements (example: `git branch`) in columns.
	ui = auto

[branch]
	# Sort git branches by most recent commit.
	sort = -committerdate

[tag]
	sort = version:refname

[sendemail]
	# Mailing lists work through old school E-Mail :sunglasses:.
	#
	# You pull, edit, commit, rebase, merge etc. code just like you would normally but
	# to submit patches upstream you have to email them as a set of patch-series through
	# the [[man:git-send-email][git send-email]] command. This will send an initial message for the first patch
	# (or a cover-letter) and then send the remaining messages as replies to that initial
	# message. Developers on the mailing list will respond to each patch individually and
	# when ready rebase the patch series onto the repository.
	#
	# When creating a follow up set of patches you should export the patch-set with the
	# reroll-count argument to increment the patch:
	#   git format-patch --reroll-count=2 HEAD -- outputfile.patch
	# You should then find the email chain tracking your pull request and select the raw
	# Message-ID field and supply this as the --in-reply-to argument to git-send-email to
	# continue the message chain. For example:
	#   git send-email --to 62994@debbugs.gnu.org -v2 --in-reply-to='<handler.62994.B.168208734930664.ack@debbugs.gnu.org>' *.patch
	#
	# See also [[https://git-send-email.io][git-send-email.io]].

	annotate = no
		# Don't force reviewing and annotating each patch before sending.

	# smtpuser = mohkale
	# from = mohkale@kisara.moe
	# smtpserver = mail.kisara.moe
	# smtpencryption = tls
	# smtpserverport = 587
		# SMTP server configuration for kisara.

	# smtpuser = USERNAME@gmail.com
	# from = USERNAME@gmail.com
	# smtpserver = smtp.gmail.com
	# smtpencryption = tls
	# smtpserverport = 587
		# SMTP server configuration for GMail.

[credential "mail.kisara.moe"]
	helper = store

[credential "smtp.gmail.com"]
	helper = store

[include]
	# Include any sub-configuration files in my config.d directory.
	path = config.d/github
	path = config.d/gitlab
	path = config.d/local

[user "email"]
	com = chaitanyarp4@gmail.com

[rerere]
	enabled = true
	autoupdate = true

[maintenance]
	repo = /home/atan/dotfiles/prog/editors/nvim/nvim_conf

# For having all pull requests as refs in the local repository.
[remote.origin]
	# Fetch all branches from the remote repository.
	fetch = '+refs/heads/*:refs/remotes/origin/*'

[color]
	ui = auto
