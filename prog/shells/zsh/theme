# My Z-Shell Theme -*- mode: sh -*-
#
# This source file defines the look and feel of my custom Z-Shell environment
# including the colors of any syntax highlighting plugin and my custom Z-Shell
# prompt.
#
# I try to keep my prompt divided into left and right sections. The left section
# dynamically updates throughout the lifetime of the shell using asynchronous
# background jobs. The right hand is where easy to calculate or relatively static
# indicators (such as a docker icon) will be placed.

# Syntax highlighting.
typeset -A                                      \
  ZSH_HIGHLIGHT_STYLES                          \
  FAST_HIGHLIGHT_STYLES
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets cursor)
FAST_HIGHLIGHT_HIGHLIGHTERS=( "${ZSH_HIGHLIGHT_HIGHLIGHTERS[@]}" )
for it in ZSH_HIGHLIGHT FAST_HIGHLIGHT; do
  declare "${it}_STYLES[unknown-token]=fg=red"                                    # errors and warnings
  declare "${it}_STYLES[reserved-word]=fg=blue"                                   # builtins and syntax specific stuff
  declare "${it}_STYLES[builtin]=fg=blue"
  declare "${it}_STYLES[named-fd]=fg=blue"
  declare "${it}_STYLES[numeric-fd]=fg=yellow"
  declare "${it}_STYLES[named-fd]=fg=yellow"
  declare "${it}_STYLES[precommand]=fg=blue"
  declare "${it}_STYLES[assign]=fg=yellow"
  declare "${it}_STYLES[path]=none"
  declare "${it}_STYLES[path-to-dir]=fg=yellow"
  declare "${it}_STYLES[suffix-alias]=fg=green"
  declare "${it}_STYLES[global-alias]=fg=green"                                   # Misc
  declare "${it}_STYLES[autodirectory]=fg=green"
  declare "${it}_STYLES[single-quoted-argument]=fg=blue"                          # color for quoted arguments/bodies
  declare "${it}_STYLES[dollar-quoted-argument]=fg=blue"
  declare "${it}_STYLES[double-quoted-argument]=fg=blue"
  declare "${it}_STYLES[single-quoted-argument-unclosed]=fg=black,bold"
  declare "${it}_STYLES[double-quoted-argument-unclosed]=fg=black,bold"
  declare "${it}_STYLES[dollar-quoted-argument-unclosed]=fg=black,bold"
  declare "${it}_STYLES[back-double-quoted-argument]=fg=cyan"
  declare "${it}_STYLES[back-dollar-quoted-argument]=fg=cyan"
  declare "${it}_STYLES[globbing]=bold"
  declare "${it}_STYLES[single-hyphen-option]=none"
  declare "${it}_STYLES[double-hyphen-option]=none"
  declare "${it}_STYLES[case-input]=fg=green"
  declare "${it}_STYLES[case-condition]=none"
  declare "${it}_STYLES[case-parentheses]=fg=yellow"
  # Used for awk expressions for some reason.
  declare "${it}_STYLES[subtle-bg]=fg=blue"
  declare "${it}_STYLES[subtle-separator]=fg=blue"
done

## Z-line-editor highlights
zle_highlight=(  )
zle_highlight+="isearch:bg=blue,fg=black"
zle_highlight+="region:fg=black,bg=white"
zle_highlight+="paste:fg=cyan"

# async prompt template curtesy of [[https://gist.github.com/denysdovhan/e83dec6f09b237acbc24a6bb25fabd13][Denys Dovhan]].
typeset -Ag prompt_data # cache variable

# The trailing space on the prompt is a non-breaking space.
DEFAULT_PROMPT="%F{white}λ%f%b "
if [ -z "$SSH_CLIENT" ] && [ -z "$SSH_TTY" ]; then
  DEFAULT_PROMPT="$DEFAULT_PROMPT%{$(printf '\033]133;A\]')%}"
fi
DEFAULT_PROMPT_RHS="$(ancestor_icons)"'%B%F{green}%n@%m%f %F{yellow}%~%f%b'

if ! hash __git_prompt 1>/dev/null 2>&1; then
  git_prompt_path="${XDG_BIN_DIR:-$HOME/.local/bin}/git-prompt"
  if [ -f "$git_prompt_path" ]; then
    ENTRY_POINT='true' . "$git_prompt_path"
  else
    echo "bash_ps1(error) : git prompt script not found: $git_prompt_path" >&2
    __git_prompt() { echo ""; }
  fi
  unset git_prompt_path
fi

# ┌────────────────────────────────────────────────┐
# │                      Utils                     │
# └────────────────────────────────────────────────┘

# see [[https://github.com/denysdovhan/spaceship-prompt/blob/master/lib/utils.zsh#L10][spaceship/utils]].
function prompt::exists() {
  command -v $1 > /dev/null 2>&1
}

function prompt::project_root() {
  if [ -n "$1" ]; then
     cd -q "$1" || return 1
  fi
  git rev-parse --show-toplevel 2>/dev/null
}

# ┌────────────────────────────────────────────────┐
# │                Prompt Sections                 │
# └────────────────────────────────────────────────┘

prompt_git_branch() {
  print -n '%F{blue}%B('"$(__git_prompt)"')%b'
}

prompt_git_status() {
  local status_flags='' status_color='magenta'
  local INDEX
  INDEX=$(command git status --porcelain -b 2>/dev/null)

  # Check for untracked files
  if grep -E '^\?\? ' <<< "$INDEX" &>/dev/null; then
    status_flags="?$status_flags"
  fi

  # Check for staged files
  if grep -e '^A[ MDAU] ' -e '^M[ MD] ' -e '^UA' <<< "$INDEX" &>/dev/null; then
    status_flags="+$status_flags"
  fi

  # Check for modified files
  if grep '^[ MARC]M ' <<< "$INDEX" &>/dev/null; then
    status_flags="!$status_flags"
  fi

  # Check for renamed files
  if grep '^R[ MD] ' <<< "$INDEX" &>/dev/null; then
    status_flags="»$status_flags"
  fi

  # Check for deleted files
  if grep -e '^[MARCDU ]D ' -e '^D[ UM] ' <<< "$INDEX" &>/dev/null; then
    status_flags="✘$git_status"
  fi

  # Check for stashes
  if git rev-parse --verify refs/stash >/dev/null 2>&1; then
    status_flags="S$status_flags"
  fi

  # Check for unmerged files
  if grep -e '^U[UDA] ' -e '^AA ' -e '^DD ' -e '^[DA]U ' <<< "$INDEX" &>/dev/null; then
    git_status="=$git_status"
  fi

  # Check whether branch is ahead
  local is_ahead=false
  if grep '^## [^ ]\+ .*ahead' <<< "$INDEX" &>/dev/null; then
    is_ahead=true
  fi

  # Check whether branch is behind
  local is_behind=false
  if grep '^## [^ ]\+ .*behind' <<< "$INDEX" &>/dev/null; then
    is_behind=true
  fi

  # Check wheather branch has diverged
  if [ "$is_ahead" = true ] && [ "$is_behind" = true ]; then
    status_flags="⇕$status_flags"
  else
    [ "$is_ahead"  = true ] && status_flags="⇡$status_flags"
    [ "$is_behind" = true ] && status_flags="⇣$status_flags"
  fi

  [ -n "$status_flags" ] && print -n '%F{'"$status_color"'} ['"$status_flags"']'
}

# see [[https://github.com/denysdovhan/spaceship-prompt/blob/master/sections/git_status.zsh][spaceship-prompt/git-status]].
prompt_git() {
  cd -q "$1" || return
  git rev-parse --is-inside-work-tree >/dev/null 2>&1 || return

  prompt_git_branch
  # prompt_git_status
}

prompt_root() {
  if [ "$EUID" -eq 0 ]; then
    print -n '%F{yellow}%B󰆥%b'
  fi
}

prompt_docker() {
  if [ -e /.dockerenv ]; then
    print -n '%F{blue} %b'
  fi
}


# see [[https://github.com/denysdovhan/spaceship-prompt/blob/master/sections/node.zsh][spaceship-prompt/node]].
prompt_node() {
  cd -q "$1" || return
  # only show the prompt section in node projects
  [ -f "package.json" -o -d node_modules ] || return

  local node_version
  if prompt::exists nvm; then
    node_version=$(nvm current 2>/dev/null)
    [[ $node_version == "system" || $node_version == "node" ]] && return
  elif prompt::exists nodenv; then
    node_version=$(nodenv version-name)
    [[ $node_version == "system" || $node_version == "node" ]] && return
  elif prompt::exists node; then
    node_version=$(node -v 2>/dev/null)
  else
    return
  fi

  print -n '%F{green}%B'"⬢ %b${node_version}"
}

# see [[https://github.com/denysdovhan/spaceship-prompt/blob/master/sections/golang.zsh#L34][spaceship-prompt/golang]].
prompt_golang() {
  cd -q "$1" || return
  [[ -f go.mod || -d Godeps || -f glide.yaml || -f Gopkg.toml || -f Gopkg.lock \
       || ( $GOPATH && "$PWD/" =~ "$GOPATH/" ) ]] || return

  prompt::exists go || return
  local go_version
  go_version=$(go version | awk '{
  if ($3 ~ /^devel/) {
    print $3 ":" substr($4, 2)
  } else {
    print "v" substr($3, 3)
  }
}
')

  print -n '%F{cyan}%B'" %b${go_version}"
}

# see [[https://github.com/denysdovhan/spaceship-prompt/blob/master/sections/pyenv.zsh][spaceship-prompt/pyenv]].
prompt_python() {
  cd -q "$1" || return

  local py_exec='python'
  if [ -n "$PIPENV_ACTIVE" -o -f "Pipfile" -o -f "Pipfile.lock" ] && prompt::exists pipenv; then
    py_exec=$(pipenv --py)
  elif [ "${POETRY_ACTIVE:-0}" -eq 1 -o -f "poetry.lock" -o -f "requirements.txt" ] && prompt::exists "$py_exec"; then
    :
  else
    return
  fi
  local python_version
  python_version=$($py_exec --version)
  python_version="${python_version#* }"
  [ -z "$python_version" ] && return

  print -n '%F{yellow}'" v${python_version}"
}

# see [[https://github.com/denysdovhan/spaceship-prompt/blob/master/sections/ruby.zsh][spaceship-prompt/ruby]].
prompt_ruby() {
  cd -q "$1" || return
  [ -f Gemfile -o -f Rakefile ] || return

  local ruby_version
  if prompt::exists rvm-prompt; then
    ruby_version=$(rvm-prompt i v g)
  elif prompt::exists chruby; then
    ruby_version=$(chruby | sed -n -e 's/ \* //p')
  elif prompt::exists rbenv; then
    ruby_version=$(rbenv version-name)
  elif prompt::exists asdf; then
    # split output on space and return first element
    ruby_version=${$(asdf current ruby)[1]}
  elif prompt::exists ruby; then
    ruby_version=$(ruby -e 'puts "v#{RUBY_VERSION}"')
  else
    return
  fi

  if [ -z "$ruby_version" ] || [ "${ruby_version}" = "system" ]; then
    return
  fi

  # ensure ruby version begins with a "v".
  [[ "${ruby_version}" =~ ^[0-9].+$ ]] && ruby_version="v${ruby_version}"

  print -n '%F{red}'" ${ruby_version}"
}

prompt_rust() {
  cd -q "$1" || return 1
  [ -f "Cargo.lock" -o -f "Cargo.toml" ] || return

  local rust_version=
  if prompt::exists rustc; then
    rust_version=$(rustc --version)
    rust_version="${rust_version#* }"
    rust_version="${rust_version%% *}"
  else
    return
  fi

  [ -z "$rust_version" ] && return
  echo -n '%F{yellow}'" v${rust_version}"
}

prompt_exit() { #(code)
  [ "$1" -eq 0 ] && return 0
  exit_color "$1" ${(l:3::0:)1}
}

PROMPT_EXEC_TIME_SHOW=true                                                   # Flag to enable or disable exec time display
PROMPT_EXEC_TIME_START=                                                      # When the last command was started
PROMPT_EXEC_TIME_DURATION=                                                   # Formatted exec time string to be placed in prompt
PROMPT_EXEC_TIME_ELAPSED=5                                                   # Minimum duration command should've run before showing anything
PROMPT_EXEC_TIME_CLEAR_IMMEDIATELY=true                                      # Clear exec time from prompt after any zle command

prompt_exec_time_preexec_hook() {
  [ "$PROMPT_EXEC_TIME_SHOW" = false ] &&
    return
  PROMPT_EXEC_TIME_START=$(date +%s)
}

prompt_exec_time_precmd_hook() {
  [ "$PROMPT_EXEC_TIME_SHOW" = false ] &&
    return
  # If you unset the value variable here then it'll be removed from the
  # prompt whenever you run a zshell command such as the newline command.
  # It'll reappear once a new shell command is executed.
  [ -n "$PROMPT_EXEC_TIME_DURATION" ] &&
    [ "$PROMPT_EXEC_TIME_CLEAR_IMMEDIATELY" != false ] &&
    unset PROMPT_EXEC_TIME_DURATION
  [ -z "$PROMPT_EXEC_TIME_START" ] &&
    return
  [ -n "$PROMPT_EXEC_TIME_DURATION" ] &&
    unset PROMPT_EXEC_TIME_DURATION

  local PROMPT_EXEC_TIME_stop
  PROMPT_EXEC_TIME_stop=$(date +%s)
  local PROMPT_EXEC_TIME_seconds_elapsed
  PROMPT_EXEC_TIME_seconds_elapsed=$(( PROMPT_EXEC_TIME_stop - PROMPT_EXEC_TIME_START ))
  unset PROMPT_EXEC_TIME_START # So we don't bother to recalculate unecessarily

  if [ -n "$PROMPT_EXEC_TIME_ELAPSED" ] &&
       [ "$PROMPT_EXEC_TIME_seconds_elapsed" -lt "$PROMPT_EXEC_TIME_ELAPSED" ]; then
    return 0
  fi

  local res
  local T=$PROMPT_EXEC_TIME_seconds_elapsed
  local D=$((T/60/60/24))
  local H=$((T/60/60%24))
  local M=$((T/60%60))
  local S=$((T%60))
  [ "$D" -gt 0 ] && res=$res$(printf '%dd ' "$D")
  [ "$H" -gt 0 ] && res=$res$(printf '%dh ' "$H")
  [ "$M" -gt 0 ] && res=$res$(printf '%dm ' "$M")
  # Don't show values like 1m 0s, the 0 is implied.
  if [ -z "$res" ] || [ "$S" -gt 0 ]; then
    res=$res$(printf '%ds' "$S")
  elif [ -n "$res" ]; then
    # Remove trailing space from earlier result which never
    # ended up joining onto anything.
    res="${res% }"
  fi

  PROMPT_EXEC_TIME_DURATION=$(print -n "%F{blue}$res%f")
}

add-zsh-hook preexec prompt_exec_time_preexec_hook
add-zsh-hook precmd  prompt_exec_time_precmd_hook

# ┌────────────────────────────────────────────────┐
# │                   Construct                    │
# └────────────────────────────────────────────────┘

prompt_join() {
  local res=''
  for arg in "$@"; do
    if [ -n "$arg" ]; then
      if [ -z "$res" ]; then
        res="$arg"
      else
        res="$res $arg"
      fi
    fi
  done

  if [ -n "$res" ]; then
    echo "$res "
  fi
}

prompt_refresh() {
  local left_rendered
  left_rendered=$(prompt_join                       \
                    "${prompt_data[prompt_root]}"   \
                    "${prompt_data[prompt_git]}"    \
                    "${prompt_data[prompt_node]}"   \
                    "${prompt_data[prompt_golang]}" \
                    "${prompt_data[prompt_ruby]}"   \
                    "${prompt_data[prompt_python]}" \
                    "${prompt_data[prompt_rust]}"   \
               )

  local right_rendered
  right_rendered=$(prompt_join                        \
                     "${prompt_data[prompt_docker]}"  \
                )
  if [ -n "${prompt_data[exec_time]}" ]; then
    right_rendered="[${prompt_data[exec_time]}] $right_rendered"
  fi
  if [ -n "${prompt_data[prompt_exit]}" ]; then
    right_rendered="${prompt_data[prompt_exit]} :: $right_rendered"
  fi

  PS1="$left_rendered$DEFAULT_PROMPT"
  RPS1="$right_rendered$DEFAULT_PROMPT_RHS"

  zle && zle .reset-prompt # Trigger prompt redraw after update
}

# ┌────────────────────────────────────────────────┐
# │                     Setup                      │
# └────────────────────────────────────────────────┘

prompt_callback() {
  local job=$1 code=$2 output=$3 exec_time=$4

  # See [[https://github.com/mafredri/zsh-async/issues/42#issuecomment-716782220][zsh-async]], this evidently fixes issues with crashing workers
  if [ "$code" -eq 2 -o "$code" -eq 3 -o "$code" -eq 130 ]; then
    # reinit async workers
    async_stop_worker 'prompt' # stop the current worker
    prompt_init_worker         # start the workers again
  fi

  # Only refresh prompt, when some segment has changed.
  local changed=false
  if [ "${prompt_data[exec_time]}" != "$PROMPT_EXEC_TIME_DURATION" ]; then
    prompt_data[exec_time]=$PROMPT_EXEC_TIME_DURATION
    changed=true
  fi
  if [ "${prompt_data[$job]}" != "$output" ]; then
    prompt_data[$job]=$output
    changed=true
  fi

  [ "$changed" = false ] || prompt_refresh
}

prompt_init_worker() {
  async_start_worker 'prompt' -n
  async_register_callback 'prompt' prompt_callback
}
prompt_init_worker

# start async jobs before cmd
prompt_precmd() {
  local prompt_last_exit=$?
  local root
  root=$(prompt::project_root "$PWD")
  async_job 'prompt' prompt_root
  async_job 'prompt' prompt_docker
  async_job 'prompt' prompt_git "$PWD"
  async_job 'prompt' prompt_node "${root:-$PWD}"
  async_job 'prompt' prompt_golang "${root:-$PWD}"
  async_job 'prompt' prompt_ruby "${root:-$PWD}"
  async_job 'prompt' prompt_exit "$prompt_last_exit"
  async_job 'prompt' prompt_python "${root:-$PWD}"
  async_job 'prompt' prompt_rust "${root:-$PWD}"
}
add-zsh-hook precmd prompt_precmd

PS1=$DEFAULT_PROMPT
RPS1=$DEFAULT_PROMPT_RHS
ZLE_RPROMPT_INDENT=0                                                            # Remove trailing indent on prompt (exists for legacy [[https://superuser.com/questions/655607/removing-the-useless-space-at-the-end-of-the-right-prompt-of-zsh-rprompt][terminals]]).
