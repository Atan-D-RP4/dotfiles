# Color Theme
set $COLOR_REGNAME = $GREEN
set $COLOR_REGVAL = $BLACK
set $COLOR_REGVAL_MODIFIED  = $RED
set $COLOR_SEPARATOR = $BLUE
set $COLOR_CPUFLAGS = $RED

###############################################################################
#                                  GDB Prompt                                 #
###############################################################################

# Setup a Python IDLE like prompt. When color is enabled the prompt will default
# to a dim color and switch to a more colorful prompt when there's a process
# running.

set prompt >>> 
python
def setup_prompt(color_map):
    assert "reset" in color_map

    # Actual body of the prompt before adding metadata and styling.
    PROMPT_CONTENT = ">>>"
    # Unicode suffix for the prompt. Will be replaced with a space on TUI mode.
    PROMPT_SUFFIX = " "

    def colorise(string, color):
        if color not in color_map or gdb.convenience_variable("USECOLOR") == 0:
            return string

        return color_map[color] + string + color_map["reset"]

    def prompt_function(_):
        use_color = gdb.convenience_variable("USECOLOR") == 1
        tui_active = gdb.convenience_variable("TUIACTIVE") == 1
        running_pid = gdb.selected_inferior().pid

        prompt = ""
        prompt += colorise(PROMPT_CONTENT, "idle" if running_pid == 0 else "active")
        prompt += " " if tui_active else PROMPT_SUFFIX
        prompt = gdb.prompt.substitute_prompt(prompt)
        return prompt

    return prompt_function


gdb.prompt_hook = setup_prompt(
    {
        # Reset all color codes
        "reset": "\[\e[0m\]",
        # Inferior process is not running
        "idle": "\[\e[90m\]",
        # Inferior process is running
        "active": "\[\e[1;35m\]",
    }
)

end
