# -*- mode: conf-space -*-
# vim:syntax=tmux filetype=tmux

run-shell 'tmux setenv -g TMUX_VERSION $(tmux -V | sed -En "s/^tmux[^0-9]*([.0-9]+).*/\1/p")'

set -g mouse on        # Tmux >= 2.1
# set -g mode-mouse on # Tmux < 2.1

set -gw mode-keys vi                                                 # copy mode bindings use bi mode
set -gw status-keys emacs                                            # bash like bindings in command prompt
set -gw xterm-keys on                                                # cooler (extended) keybinding
set -g clock-mode-style 24
set -g detach-on-destroy off                                         # when session killed, make client switch
set -g renumber-windows on                                           # automatically number session windows
set -g set-titles on                                                 # update the title of my terminal
set -g base-index 1                                                  # windows start counting from 1
set -g pane-base-index 1                                             # panes start counting from 1
set -g history-limit 10000                                           # a lot of history is a good thing
set -g set-titles-string 'tmux@#H [#S:#I] #W'                        # title of terminal when running tmux
set -sg escape-time 10                                               # small enough for nvim and alt-keys :smile:.
set -ga terminal-overrides ",*256col*:Tc"                            # enable true-color

# Assign the TERM environment variable depending on the current
# terminal. I'll add support for other true-color terms as I use
# them.
%if '#{==:#{TERM},st-256color}'
set -g default-terminal "screen-24bit"
%else
set -g default-terminal "screen-256color"
%endif

# Detect events in windows and mark appropriately. Supported events include:
# activity - refers to any new content being written to the terminal on the window.
# silence  - checks whether window has been inactive for the given duration
# bell     - checks whether the terminal in that window has issued the bell
set -g monitor-activity off
set -g monitor-bell     on
set -g monitor-silence  0
set -g visual-activity  off
set -g visual-bell      off
set -g visual-silence   off
set -g activity-action  other
set -g bell-action      other
set -g silence-action   other

# change leader to C-q
unbind C-b
set -g prefix C-q
bind C-q send-prefix

bind \# set-window-option monitor-activity\; display-message "#{?monitor-activity,Monitoring,Ignoring} activity in current window"
bind \~ run "tmux command-prompt -I #{?monitor-silence,#{monitor-silence},10} -p 'Set silence interval (seconds):' 'set monitor-silence %%'"

bind T set -w status #{?#{==:#{status},on},on,off}                                                 # toggle whether to show the status-bar or not
bind t set status-position #{?#{==:#{status-position},top},bottom,top}                             # toggle the position of the status-bar

bind r command-prompt -I "#W" "rename-window -- '%%'"
bind R command-prompt -I "#S" "rename-session -- '%%'"

bind m   select-pane -m                                                                            # toggle the marked status of the current pane
bind M-r source "$TMUX_HOME/tmuxrc" \; display-message "Config reloaded..."                        # reload my tmux configuration from conf sources
bind e   new-window "$EDITOR $TMUX_HOME/tmuxrc"                                                    # open my tmux config in users EDITOR

bind -r Tab last-window
bind -r C-Tab switch-client -l                                                                     # jump between this and the last active session
bind "'" run -b "$TMUX_HOME/cmds/jump-marked || true"                                              # jump between the current window and the marked window.

bind ! break-pane                                                                                  # move current pane into its own tab
bind @ join-pane                                                                                   # join marked pane onto current window
bind Â£ move-window -a -s '{marked}'                                                                # move marked window to current session
bind $ link-window -a -s '{marked}'                                                                # link marked window to current session
bind % swap-pane                                                                                   # swap current pane with the marked pane

bind s command-prompt -p "Query:" "find-window -Z -CNTi '%%'"                                      # Show list of windows matching a GLOB pattern

bind | command-prompt -p "Pipe:" "pipe-pane -o '%%'"

bind b   choose-tree -Zs
bind B   choose-tree -Zw
bind C-b choose-client -Z

bind C-S-w kill-session
bind C-w kill-pane
bind M-w unlink-window -k                                                                          # keeps the window alive in any other sessions if it exists there.

# transpose window layout
bind -r C-o rotate-window -ZU
bind -r M-o rotate-window -ZD

# exit tmux client
bind z   detach-client
bind C-z detach-client

# maximise the current pane
bind Space resize-pane -Z
bind C-m   resize-pane -Z

# cycle preconfigured layouts
bind -r . next-layout
bind -r , previous-layout

# create a new window/panes
bind C-t new-window   -c '#{pane_current_path}'
bind C-v split-window -c '#{pane_current_path}' -h
bind C-s split-window -c '#{pane_current_path}'

## variants, where you can specify the command to run.
bind M-t command-prompt -I "$SHELL" "new-window '%%'"
bind M-v command-prompt -I "$SHELL" "split-window -h '%%'"
bind M-s command-prompt -I "$SHELL" "split-window '%%'"

# vim like, pane resize keys
bind -r < resize-pane -L 5
bind -r > resize-pane -R 5
bind -r + resize-pane -U 5
bind -r - resize-pane -D 5

## variants where you manually specify the percentage
bind M-< command-prompt -p "count" "resize-pane -L '%%'"
bind M-> command-prompt -p "count" "resize-pane -R '%%'"
bind M-+ command-prompt -p "count" "resize-pane -U '%%'"
bind M-- command-prompt -p "count" "resize-pane -D '%%'"

# move between windows, sessions or panes
bind C-a           select-window -t 1                                                              # jump to the first window in this session
bind C-e run 'tmux select-window -t "#{session_windows}"'                                          # jump to the last window in this session

bind -r )   switch-client -n
bind -r (   switch-client -p
bind -r M-n switch-client -p
bind -r M-p switch-client -n

bind -r C-n next-window
bind -r C-p previous-window

## Jump to windows with activity/bells/alerts
bind -r C-M-n next-window -a
bind -r C-M-p previous-window -a

## push the current window backwards or forwards
bind -r [ swap-window -d -t -1
bind -r ] swap-window -d -t +1

## move between panes
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

### Remove repeat prefix
bind Left  select-pane -L
bind Down  select-pane -D
bind Up    select-pane -U
bind Right select-pane -R

### repeatable variants
bind -r C-h select-pane -L
bind -r C-j select-pane -D
bind -r C-k select-pane -U
bind -r C-l select-pane -R

## Numerical jumps
bind M-0 command-prompt -p "index: " "select-pane -t ':%%'"
bind M-1 select-pane -t 1
bind M-2 select-pane -t 2
bind M-3 select-pane -t 3
bind M-4 select-pane -t 4
bind M-5 select-pane -t 5
bind M-6 select-pane -t 6
bind M-7 select-pane -t 7
bind M-8 select-pane -t 8
bind M-9 select-pane -t 9

bind 0 command-prompt -p index "select-window -t ':%%'"
bind 1 select-window -t 1
bind 2 select-window -t 2
bind 3 select-window -t 3
bind 4 select-window -t 4
bind 5 select-window -t 5
bind 6 select-window -t 6
bind 7 select-window -t 7
bind 8 select-window -t 8
bind 9 select-window -t 9

# visual mode. selection, yanking and pasting
bind p paste-buffer -p
bind P choose-buffer

bind                 v   copy-mode
bind                 V   copy-mode \; send-keys V
bind                 /   copy-mode \; send-keys /
bind                 ?   copy-mode \; send-keys ?
bind                 H   copy-mode \; send-keys H
bind                 L   copy-mode \; send-keys L
bind                 M   copy-mode \; send-keys M
bind                 C-u copy-mode \; send-keys -X halfpage-up
bind                 C-d copy-mode \; send-keys -X halfpage-down
bind -T copy-mode-vi C-g send-keys -X cancel
bind -T copy-mode-vi v   send-keys -X begin-selection
bind -T copy-mode-vi y   send-keys -X copy-pipe-and-cancel clip
bind -T copy-mode-vi Y   send-keys v$ \; send-keys -X copy-pipe-and-cancel clip
bind -T copy-mode-vi C-y send-keys -X append-selection

# curtesy of [[https://gist.github.com/samoshkin/05e65f7f1c9b55d3fc7690b59d678734][samoshkin]]. let's you nest tmux sessions safely (kind-of)
# and makes focusing on the current pane (as if tmux isn't active)
# possible.
bind -T root F12  \
  set prefix None \;\
  set key-table off \;\
  set status off \;\
  set escape-time 0 \;\
  if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
  refresh-client -S \;\

bind -T off F12 \
  set -u prefix \;\
  set -u key-table \;\
  set -u status \;\
  set -u escape-time \;\
  refresh-client -S

# Script Bindings
bind x switch-client -Tm-commands                                              # Custom key-table prefix

# Proxy to [[/home/mohkale/.config/dotfiles/core/autoload/cmds/fztmuxinator][fztmuxinator]] using a tmux popup.
bind -Tm-commands x run -b '\
  _fzf() { tmux-popup -w 80% -h 80% -- fzf --reverse "$@"; };\
  . $HOME/.config/autoloads/cmds/fztmuxinator;\
  fztmuxinator\
'

# Attach to a session interactively using fzf
bind -Tm-commands s run -b "$TMUX_HOME/cmds/attach-session"

# Opens a new tmux window at a projects directory
bind -Tm-commands p run -b '\
  _fzf() { tmux-popup -h 80% -w 80% -- fzf --reverse "$@"; };\
  . $HOME/.config/tmux/cmds/select_path;\
  . $HOME/.config/autoloads/cmds/cd_repo;\
  cd_repo\
'

bind -Tm-commands a run -b '\
  _fzf() { tmux-popup -h 80% -w 80% -- fzf --reverse "$@"; };\
  . $HOME/.config/tmux/cmds/select_path;\
  . $HOME/.config/autoloads/cmds/cd_fsmap;\
  cd_fsmap\
'

bind -Tm-commands z run -b '\
  _fzf() { tmux-popup -h 80% -w 80% -- fzf --reverse "$@"; };\
  . $HOME/.config/tmux/cmds/select_path;\
  . $HOME/.config/autoloads/cmds/select_fsmap;\
  select_fsmap\
'

bind -Tm-commands e run -b '\
  _fzf() { tmux-popup -h 80% -w 80% -- fzf --reverse "$@"; };\
  . $HOME/.config/tmux/cmds/select_path;\
  . $HOME/.config/autoloads/cmds/cd_env;\
  cd_env\
'

bind -Tm-commands b run -b -C '\
  _fzf() { tmux-popup -h 80% -w 80% -- fzf --reverse "$@"; };\
  . $HOME/.config/autoloads/cmds/fzbm;\
  fzbm\
'

bind -Tm-commands m run -b '\
  _fzf() { tmux-popup -h 80% -w 80% -- fzf --reverse "$@"; };\
  . $HOME/.config/tmux/cmds/select_path;\
  . $HOME/.config/autoloads/cmds/cd_mount;\
  cd_mount\
'

# bind B run -b "$TMUX_HOME/cmds/run-binding -rpv"
# bind M-a run -b "$TMUX_HOME/cmds/manage-windows -s"
# bind M-w run -b "$TMUX_HOME/cmds/manage-windows"
# bind W run -b "$TMUX_HOME/cmds/manage-windows -i"
# bind X run -b "$TMUX_HOME/cmds/run-command"

source $TMUX_HOME/theme
