# -*- mode: conf-space -*-
# vim:syntax=tmux filetype=tmux

run 'tmux setenv -g TMUX_VERSION $(tmux -V | sed -En "s/^tmux[^0-9]*([.0-9]+).*/\1/p")'

run '\
tmux set-option -g default-shell \
"$(command -v fish || command -v bash || command -v zsh || echo /bin/sh)"'

# For image.nvim plugin
set -gq allow-passthrough on
set -g visual-activity off

set -g mouse on        # Tmux >= .1
# set -g mode-mouse on # Tmux < 2.1

set -gw mode-keys vi                                                 # copy mode bindings use bi mode
set -gw status-keys emacs                                            # bash like bindings in command prompt
set -gw xterm-keys on                                                # cooler (extended) keybinding
set -g clock-mode-style 24
set -g detach-on-destroy off                                         # when session killed, make client switch
set -g renumber-windows on                                           # automatically number session windows
set -g set-titles on                                                 # update the title of my terminal
set -g base-index 1                                                  # windows start counting from 1
set -g pane-base-index 1                                             # panes start counting from 1
set -g history-limit 100000                                          # A lot of history is a good thing
set -g prompt-history-limit 100000
set -g history-file "$XDG_STATE_HOME/tmux_history"                   # Persist tmux prompt input in a local config file
set -sg escape-time 10                                               # small enough for nvim and alt-keys :smile:.
set -ga terminal-overrides ",*256col*:Tc,*24bit*:Tc"                 # enable true-color
set -s extended-keys always                                          # support [[https://github.com/tmux/tmux/wiki/Modifier-Keys#extended-keys][xterm]] extension keys
set -as terminal-features 'st*:extkeys'                              # allow extended-keys with st just like xterm
set -gq message-limit 10000                                          # Store upto this many messages in the log
set -g set-clipboard on                                              # Save to clipboard but don't read back from it
set -g copy-command clip                                             # Set executable used to copy to the clipboard
set -g word-separators " =+!@#$%^&*,.<>/?;:\\|~`(){}[]\"'"           # Specify boundary for new-words (eg: forward-word)
set -g repeat-time 300                                               # Interval over which you can repeat a repeatable keypress
set -g wrap-search off                                               # Don't jump back to the first search after going forward from the last search
set -g pane-border-status off # top                                  # Don't show pane-status-format at the edge of each pane
set -g scroll-on-clear on                                            # Scroll window to top before clearing so later history scrolling isn't truncated
set -g focus-events on                                               # Enable terminal focus events when supported
setw -g aggressive-resize on                                         # Auto-resize window to fit smallest and largest session, not much recent

# Assign the TERM environment variable depending on the current
# terminal. I'll add support for other true-color terms as I use
# them.
%if '#{m:st*,#{TERM}}'
  %if '#{==:#{TERM},st-256color}'
    set -g default-terminal "st-tmux-24bit"
  %else
    set -g default-terminal "st-tmux-256color"
  %endif
%else
  set -g default-terminal "${TERM}"
%endif

# activity - refers to any new content being written to the terminal on the window.
# silence  - checks whether window has been inactive for the given duration
# bell     - checks whether the terminal in that window has issued the bell
set -g monitor-activity off
set -g monitor-bell     on
set -g monitor-silence  0
set -g visual-activity  off
set -g visual-bell      off
set -g visual-silence   off
set -g activity-action  other
set -g bell-action      other
set -g silence-action   other

# change leader to C-q
unbind C-b
set -g prefix C-a
bind C-a send-prefix

bind \# set-window-option monitor-activity\; display-message "#{?monitor-activity,Monitoring,Ignoring} activity in current window"
bind \~ run "tmux command-prompt -I #{?monitor-silence,#{monitor-silence},10} -p 'Set silence interval (seconds):' 'set monitor-silence %%'"
bind `  set-window-option synchronize-panes
bind M-m show-messages
bind M-T set -ug @status-message ""                                                                # An optional message shown when the terminal title isn't set.

bind r command-prompt -I "#W" -p "Rename window:" "if-shell \"[ -n '%1' ]\" { rename-window -- '%1' } { set automatic-rename on }"
bind R command-prompt -I "#S" -p "Rename session:" "rename-session -- '%%'"

bind m   select-pane -m                                                                            # toggle the marked status of the current pane
bind C-r source "$TMUX_HOME/tmux.conf" \; display-message "Config reloaded..."                     # reload my tmux configuration from conf sources
bind e   new-window "$EDITOR $TMUX_HOME/tmux.conf"                                                 # open my tmux config in users EDITOR

bind -r Tab last-window
bind -r C-Tab switch-client -l                                                                     # jump between this and the last active session
bind "'" run -b "$TMUX_HOME/cmds/jump-marked || true"                                              # jump between the current window and the marked window.

bind ! break-pane -a                                                                               # move current pane into its own tab
bind @ join-pane                                                                                   # join marked pane onto current window
bind Â£ swap-pane                                                                                   # swap current pane with the marked pane
bind $ move-window -a -s '{marked}'                                                                # move marked window to current session
bind % link-window -a -s '{marked}'                                                                # link marked window to current session
bind ^ swap-window                                                                                 # swap marked window with current one

# Move panes left, down, up and right within the current window.
bind -r H if -F '#{pane_at_left}'   "" { run-shell -b "tmux swap-pane -d -s '#{pane_id}' -t '{left-of}'" }
bind -r J if -F '#{pane_at_bottom}' "" { run-shell -b "tmux swap-pane -d -s '#{pane_id}' -t '{down-of}'" }
bind -r K if -F '#{pane_at_top}'    "" { run-shell -b "tmux swap-pane -d -s '#{pane_id}' -t '{up-of}'" }
bind -r L if -F '#{pane_at_right}'  "" { run-shell -b "tmux swap-pane -d -s '#{pane_id}' -t '{right-of}'" }

bind s command-prompt -p "Search windows:" "find-window -Z -CNTi '%%'"                             # Show list of windows matching a GLOB pattern

bind | command-prompt -p "Pipe pane:" "pipe-pane -o '%%'"

bind M-h command-prompt -k -p "Describe key:" "list-keys -1N '%%'"                                 # Inspect the key-symbol bound by tmux

bind b   choose-tree -Zs
bind C-b choose-tree -Zw
%hidden TMUX_ACTIVITY_WINDOW_FILTER='#{||:#{window_silence_flag},#{||:#{window_activity_flag},#{||:#{window_bell_flag},#{window_marked_flag}}}}'
bind M-b if -F "#{?#{s/0+//:#{S:#{W:$TMUX_ACTIVITY_WINDOW_FILTER}}},1,0}" {
  choose-tree -Zw -f "$TMUX_ACTIVITY_WINDOW_FILTER"
} {
  display-message 'No windows with activity found in all current sessions'
}
bind B   choose-client -Z

bind q kill-pane
bind w   unlink-window -k                                                                          # keeps the window alive in any other sessions if it exists there.
bind W   kill-window
bind M-w kill-session
bind Z   kill-session

# transpose window layout
bind -r C-o rotate-window -ZU
bind -r M-o rotate-window -ZD

# exit tmux client
bind z   detach-client
bind C-z detach-client

# maximise the current pane
bind Space resize-pane -Z
bind C-m   resize-pane -Z

# cycle preconfigured layouts
bind -r . next-layout
bind -r , previous-layout

# create a new sessions/window/panes
set -g @new-window-adjacent 1                                                                       # When true, creating a new window is made adjacent to the current window
set -g @new-window-use-cwd  1                                                                       # When true, new windows are made with the current-working-directory instead of ~/
set -g @new-session-use-cwd 1                                                                       # Like @new-window-use-cwd but for sessions instead of windows
set -g @new-session-prefix  tmux-%d                                                                 # Format string used with @new-session-count when constructing a new session name
%if '#{==:#{@new-session-count},}'
  set -g @new-session-count 0                                                                       # Count which will be incremented to create new sesions.
                                                                                                    # Set to -1 to always pick the smallest count which doesn't already exist.
                                                                                                    # This value is only set by my tmux config once, even when reloaded.
%endif

# Create a new session with no consideration to its name, beyond the fact it's unique.
bind N run-shell '                                                              \
set -e;                                                                         \
count=$(tmux show -gv @new-session-count);                                      \
format=$(tmux show -gv @new-session-prefix);                                    \
cwd=$HOME;                                                                      \
if [ "$(tmux show -gv @new-session-use-cwd)" -ne 0 ]; then                      \
  cwd=$(tmux display-message -p "#{pane_current_path}");                        \
fi;                                                                             \
if [ -z "$format" ]; then                                                       \
  format=tmux-%d;                                                               \
fi;                                                                             \
original_count=$count;                                                          \
if [ -z "$count" ] || [ "$count" -lt 0 ]; then                                  \
  count=0;                                                                      \
fi;                                                                             \
session=;                                                                       \
while [ -z "$session" ] || tmux has-session -t "$session" >/dev/null 2>&1; do   \
  session=$(printf "$format" "$count");                                         \
  count=$((count+1));                                                           \
done;                                                                           \
if [ "$original_count" -ge 0 ]; then                                            \
  tmux set -g @new-session-count "$count";                                      \
fi;                                                                             \
tmux new-session -s "$session" -c "$cwd" -d;                                    \
tmux switch-client -t "$session";                                               \
'

# Create a new session prompting for its name.
bind n command-prompt -p "New session:" "run-shell '{"'         \
  set -e;                                                       \
  it='"'%%'"';                                                  \
  [ -z "$it" ] && exit 0;                                       \
  cwd=$HOME;                                                    \
  it=${it//[.:]/-};                                             \
  if [ "$(tmux show -gv @new-session-use-cwd)" -ne 0 ]; then    \
    cwd=$(tmux display-message -p "#{pane_current_path}");      \
  fi;                                                           \
  tmux new-session -s "$it" -c "$cwd" -d;                       \
  tmux switch-client -t "$it";                                  \
}                                                               \
'"'"

bind C-t run-shell "tmux new-window #{?@new-window-adjacent,-a,} -c #{?#{==:#{@new-window-use-cwd},1},#{q:pane_current_path},$HOME}"
bind C-v split-window -c "#{?#{==:#{@new-window-use-cwd},1},#{pane_current_path},$HOME}" -h
bind C-s split-window -c "#{?#{==:#{@new-window-use-cwd},1},#{pane_current_path},$HOME}"

## variants, where you can specify the command to run.
bind M-t command-prompt -I "$SHELL" -p "Command in new window:"         'new-window   -c "#{?#{==:#{@new-window-use-cwd},1},#{pane_current_path},$HOME}" "%%"'
bind M-v command-prompt -I "$SHELL" -p "Command in new split:"          'split-window -c "#{?#{==:#{@new-window-use-cwd},1},#{pane_current_path},$HOME}" -h "%%"'
bind M-s command-prompt -I "$SHELL" -p "Command in new vertical split:" 'split-window -c "#{?#{==:#{@new-window-use-cwd},1},#{pane_current_path},$HOME}" "%%"'

# vim like, pane resize keys
bind -r < resize-pane -L 5
bind -r > resize-pane -R 5
bind -r + resize-pane -U 5
bind -r - resize-pane -D 5

## variants where you manually specify the percentage
bind M-< command-prompt -p "Expand pane left:"   "resize-pane -L '%%'"
bind M-> command-prompt -p "Expand pane right:"  "resize-pane -R '%%'"
bind M-+ command-prompt -p "Expand pane height:" "resize-pane -U '%%'"
bind M-- command-prompt -p "Shrink pane height:" "resize-pane -D '%%'"

# move between windows, sessions or panes
bind C-d select-window -t '{start}'                                                                # jump to the first window in this session
bind C-e select-window -t '{end}'                                                                  # jump to the last window in this session

bind -r )   switch-client -n
bind -r (   switch-client -p
bind -r M-n switch-client -p
bind -r M-p switch-client -n

bind -r C-n next-window
bind -r C-p previous-window

## Jump to windows with activity/bells/alerts
bind -r C-M-n next-window -a
bind -r C-M-p previous-window -a

## push the current window backwards or forwards
bind -r [ swap-window -d -t -1
bind -r ] swap-window -d -t +1
## push the current window to the end or start of the window-list.
bind M-[ swap-window -d -t 1
bind M-] swap-window -d -t '{end}'

## move between panes
set -g @switch-pane-clamp 1                                                                        # when true, switching a window to the right/left/up/down will wrap around

bind h if -F '#{&&:#{@switch-pane-clamp},#{pane_at_left}}'   '' 'select-pane -L'
bind j if -F '#{&&:#{@switch-pane-clamp},#{pane_at_bottom}}' '' 'select-pane -D'
bind k if -F '#{&&:#{@switch-pane-clamp},#{pane_at_top}}'    '' 'select-pane -U'
bind l if -F '#{&&:#{@switch-pane-clamp},#{pane_at_right}}'  '' 'select-pane -R'

### Remove repeat prefix
bind Left  if -F '#{&&:#{@switch-pane-clamp},#{pane_at_left}}'   '' 'select-pane -L'
bind Down  if -F '#{&&:#{@switch-pane-clamp},#{pane_at_bottom}}' '' 'select-pane -D'
bind Up    if -F '#{&&:#{@switch-pane-clamp},#{pane_at_top}}'    '' 'select-pane -U'
bind Right if -F '#{&&:#{@switch-pane-clamp},#{pane_at_right}}'  '' 'select-pane -R'

### repeatable variants
bind -r C-h if -F '#{&&:#{@switch-pane-clamp},#{pane_at_left}}'   '' 'select-pane -L'
bind -r C-j if -F '#{&&:#{@switch-pane-clamp},#{pane_at_bottom}}' '' 'select-pane -D'
bind -r C-k if -F '#{&&:#{@switch-pane-clamp},#{pane_at_top}}'    '' 'select-pane -U'
bind -r C-l if -F '#{&&:#{@switch-pane-clamp},#{pane_at_right}}'  '' 'select-pane -R'

## Numerical jumps
bind C-0 command-prompt -p 'Select pane at index:' "select-pane -t '%%'"
bind C-1 select-pane -t 1
bind C-2 select-pane -t 2
bind C-3 select-pane -t 3
bind C-4 select-pane -t 4
bind C-5 select-pane -t 5
bind C-6 select-pane -t 6
bind C-7 select-pane -t 7
bind C-8 select-pane -t 8
bind C-9 select-pane -t 9

bind 0 command-prompt -p 'Select window at index:' "select-window -t ':%%'"
bind 1 select-window -t 1
bind 2 select-window -t 2
bind 3 select-window -t 3
bind 4 select-window -t 4
bind 5 select-window -t 5
bind 6 select-window -t 6
bind 7 select-window -t 7
bind 8 select-window -t 8
bind 9 select-window -t 9

# visual mode. selection, yanking and pasting
bind p paste-buffer -p
bind P choose-buffer

bind                 v   copy-mode
bind                 V   copy-mode \; send-keys V
bind                 /   copy-mode \; send-keys /
bind                 ?   copy-mode \; send-keys ?
bind                 C-q copy-mode \; send-keys -X halfpage-up
bind                 C-f copy-mode \; send-keys -X halfpage-down
bind -T copy-mode-vi C-g send-keys -X cancel
bind -T copy-mode-vi v   if -F '#{?selection_present}' {send-keys -X clear-selection} {send-keys -X begin-selection}
bind -T copy-mode-vi y   send-keys -X copy-pipe-and-cancel clip
bind -T copy-mode-vi M-y send-keys -X copy-pipe clip
bind -T copy-mode-vi Y   send-keys v$ \; send-keys -X copy-pipe-and-cancel clip
bind -T copy-mode-vi C-y send-keys -X append-selection

## Rebalance view around current point in the scrollback buffer
bind -T copy-mode-vi z switch-client -Tcopy-mode-scroll                         # Key-table prefix for scrolling
bind -T copy-mode-scroll t send-keys -X scroll-top
bind -T copy-mode-scroll z send-keys -X scroll-middle
bind -T copy-mode-scroll b send-keys -X scroll-bottom

bind M-k copy-mode\; send-keys M-k
bind -T copy-mode-vi -r M-k send-keys -X previous-prompt
bind M-j copy-mode\; send-keys M-j
bind -T copy-mode-vi -r M-j send-keys -X next-prompt

# curtesy of [[https://gist.github.com/samoshkin/05e65f7f1c9b55d3fc7690b59d678734][samoshkin]]. let's you nest tmux sessions safely (kind-of)
# and makes focusing on the current pane (as if tmux isn't active)
# possible.
bind -T root F12  \
  set -p prefix None \;\
  set -p key-table off \;\
  set status off \;\
  set -p escape-time 0 \;\
  if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
  refresh-client -S \;\

bind -T off F12 \
  set -pu prefix \;\
  set -pu key-table \;\
  set -u status \;\
  set -p escape-time 10 \;\
  refresh-client -S

# TODO: Find something more useful for these bindings.
bind T set -w status #{?#{==:#{status},on},on,off}                                                 # toggle whether to show the status-bar or not
bind t set status-position #{?#{==:#{status-position},top},bottom,top}                             # toggle the position of the status-bar

# Script Bindings
bind M-e run -b 'tmux new-window "tmux capture-pane -t #{pane_id} -p -S - | vipe"'
bind M-l run -b '
  if [ "#{pane_pipe}" -eq 1 ]; then\
    tmux pipe-pane -t "#{pane_id}";\
    tmux display-message "Killing existing pipe to pane #P in window #S for session #{session_name}";\
  else
    dest="$XDG_DATA_HOME/tmux/log-#S-#I-#P";\
    tmux pipe-pane -t "#{pane_id}" -O "cat > $dest";\
    tmux new-window "${PAGER:-less} +F $dest";\
    tmux display-message "Piping current pane into $dest";\
  fi;\
'

bind x switch-client -Tm-commands                                              # Custom key-table prefix

# Proxy to [[/home/mohkale/.config/dotfiles/core/autoload/cmds/fztt][fztt]] using a tmux popup.
bind -Tm-commands x run -b 'bash -c '"'"'\
  exec 2>&1;\
  . $HOME/.config/tmux/cmds/setup-fzf;\
  . $HOME/.config/autoloads/cmds/fztt;\
  fztt >/dev/null 2>&1\
'"'"

# Attach to a session interactively using fzf
bind -Tm-commands s run -b "bash -c $TMUX_HOME/cmds/attach-session"

# Opens a new tmux window at a projects directory
bind -Tm-commands p run -b 'bash -c '"'"'\
  TMUX_CD_NEW_SESSION=1;\
  . $HOME/.config/tmux/cmds/setup-fzf;\
  . $HOME/.config/autoloads/cmds/cd_project;\
  cd_project\
'"'"

bind -Tm-commands z run -b 'bash -c '"'"'\
  . $HOME/.config/tmux/cmds/setup-fzf;\
  . $HOME/.config/autoloads/cmds/cd_fs_aliases;\
  cd_fs_aliases\
'"'"

bind -Tm-commands a run -b 'bash -c '"'"'\
  . $HOME/.config/tmux/cmds/setup-fzf;\
  . $HOME/.config/autoloads/cmds/select_fsmap;\
  select_fsmap\
'"'"

bind -Tm-commands e run -b 'bash -c '"'"'\
  . $HOME/.config/tmux/cmds/setup-fzf;\
  . $HOME/.config/autoloads/cmds/cd_env;\
  cd_env\
'"'"

bind -Tm-commands b run -b 'bash -c '"'"'\
  . $HOME/.config/tmux/cmds/setup-fzf;\
  . $HOME/.config/autoloads/cmds/fzf_bookmarks;\
  fzf_bookmarks >/dev/null 2>&1\
'"'"

bind -Tm-commands M run -b 'bash -c '"'"'\
  . $HOME/.config/tmux/cmds/setup-fzf;\
  . $HOME/.config/autoloads/cmds/cd_mount;\
  cd_mount\
'"'"

bind -Tm-commands m run -b 'bash -c '"'"'\
  . $HOME/.config/tmux/cmds/setup-fzf;\
  . $HOME/.config/autoloads/cmds/fzf_man;\
  fzf_man\
'"'"

bind -Tm-commands i run -b "$TMUX_HOME/cmds/extracto -wi"                                          # Copy and insert a word displayed in one of the panes in the current window
bind -Tm-commands y run -b "$TMUX_HOME/cmds/extracto -w"                                           # Copy a word displayed at some point in the current pane

bind C-x run -b 'tmux-popup -w 100% -h 100% launch'

# bind B run -b "$TMUX_HOME/cmds/run-binding -rpv"
# bind M-a run -b "$TMUX_HOME/cmds/manage-windows -s"
# bind M-w run -b "$TMUX_HOME/cmds/manage-windows"
# bind W run -b "$TMUX_HOME/cmds/manage-windows -i"
# bind X run -b "$TMUX_HOME/cmds/run-command"

source $TMUX_HOME/theme.conf

# Install tpm if it doesn't exist
if-shell '[ ! -d "$HOME/.tmux/plugins/tpm" ]' {
  run 'git clone https://github.com/tmux-plugins/tpm.git $HOME/.tmux/plugins/tpm'
}

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
# set -g @plugin 'tmux-plugins/tmux-resurrect'
# set -g @plugin 'tmux-plugins/tmux-continuum'
#
# # bind -Tm-commands x to run the tmux-resurrect restore
# set -g @resurrect-restore 'C-c'
# set -g @resurrect-save 'o'


run '$HOME/.tmux/plugins/tpm/tpm'

if-shell '[ -e "$TMUX_HOME/tmux-local.conf" ]' {
  source $TMUX_HOME/tmux-local.conf
}
