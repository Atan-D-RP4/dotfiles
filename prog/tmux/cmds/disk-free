#!/usr/bin/env python3
# Tmux prompt script to peridically output freely available disk-space.

import os
import sys
import time
import dataclasses
import shutil
from pathlib import Path

from mohkale import hurry

DEFAULT_CONFIG = ["/:/"]
DEFAULT_CONFIG_PATH = Path(os.path.expandvars('$TMUX_HOME/disk-free.conf'))


@dataclasses.dataclass
class ConfigEntry(object):
    name: str
    mount: str

def _should_read_config(config):
    """Closure around config which continually checks
    whether config is out of date and can be read since
    a previous reading.
    """
    while True:
        last_read_time = 0
        try:
            # Config must exist, be a file and be have a modification time
            # newer than the last time we returned true
            readp = config.exists() and \
                config.is_file() and \
                args.config.stat().st_mtime > last_read_time
            yield readp
            if readp:
                last_read_time = time.time()
        except GeneratorExit:
            break
        except:
            yield False

def parse_config(body):
    """Parse an iterable over the contents of a configuration file
    into a collection fo ConfigEntry entries.

    If body is a file like object it'll automatically be closed on
    exit.
    """
    res = []
    try:
        for line in body:
            args = line.rstrip().split(':')
            args[1] = Path(args[1])
            res.append(ConfigEntry(*args))
        return res
    finally:
        if hasattr(body, 'close'):
            body.close()


def format_percentage(usage, percent):
    return str(percent) + '%'


def format_free_bytes(usage, percent):
    return '%d%s' % hurry.bytes(usage.free, 1000)


def format_mount(entry, fmt, args):
    try:
        if not entry.mount.exists():
            return None
        usage = shutil.disk_usage(str(entry.mount))
    except:
        return None
    percent = round(100 * usage.used / float(usage.total))
    res = ''
    res += args.mount_style + entry.name + args.reset_style
    res += ':' + args.value_style
    for threshold, st in args.thresholds:
        if percent >= threshold:
            res += st
            break
    res += fmt(usage, percent)
    return res

def mount_loop(args):
    fmt = format_percentage
    if args.show_bytes:
        fmt = format_free_bytes

    cfg = None
    reread_p = _should_read_config(args.config)
    while True:
        try:
            # Load configuration if it's changed or we haven't yet.
            should_read_conf = next(reread_p)
            if cfg is None or should_read_conf:
                cfg = parse_config(
                    args.config.open('r', encoding='utf-8')
                    if should_read_conf else DEFAULT_CONFIG)

            formatted = (format_mount(it, fmt, args) for it in cfg)
            yield ' '.join(x for x in formatted if x)
        except GeneratorExit:
            break

def print_loop(it, unbuffer, sleep):
    last_output = None
    for line in it:
        if line != last_output:
            print(line)
            last_output = line
            if unbuffer:
                sys.stdout.flush()
        if not sleep:
            break
        time.sleep(sleep)


if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser()

    parser.add_argument('-c', '--config', type=Path,
                        default=DEFAULT_CONFIG_PATH,
                        help='Specify mount map configuration file')
    parser.add_argument('-b', '--show-bytes', action='store_true',
                        help='Show bytes remaining instead of percentage used')

    parser.add_argument('-m', '--mount-style', default='',
                        help='Specify style for mount points')
    parser.add_argument('-r', '--reset-style', default='#[none]',
                        help='Specify style for resetting styles')
    parser.add_argument('-v', '--value-style', default='',
                        help='Specify style for value points')
    parser.add_argument('-t', '--thresholds',
                        nargs=2, metavar=('PERCENT', 'STYLE'),
                        action='append', default=[],
                        help='Specify style thresholds')

    parser.add_argument('-u', '--unbuffer', action='store_true',
                        help='Immeadiately flush output after writing')
    parser.add_argument('-s', '--sleep', type=int,
                        help='When given, wait this duration between outputting')

    args  = parser.parse_args()
    vargs = vars(args)

    for it in args.thresholds:
        try:
            it[0] = float(it[0])
        except ValueError:
            parser.error('Threshold values must be a number, not: %s', it[0])
    args.thresholds = sorted(args.thresholds, key=lambda x: x[0], reverse=True)

    try:
        print_loop(mount_loop(args), args.unbuffer, args.sleep)
    except KeyboardInterrupt:
        pass
