#!/bin/sh
# Create a virtual tmux client which follows a given client (or stays
# in the currently active session) and continually outputs the active
# pane-command.
#
# This script then pipes that program name through to [[file:~/.config/dotfiles/bin/prog-icons][prog-icons]] to show
# an icon that can be substituted into your tmux status-line.

print_usage() {
  echo "Usage: $(basename "$0") [-h] [-c CLIENT]"
}

print_help() {
  print_usage
  echo "Optional Arguments:"
  echo "  -h    Show this help message and exit"
  echo "  -c CLIENT"
  echo "     Specify the tmux client to follow"
}

client=''
while getopts hd:c: OPTION; do
  case "$OPTION" in
    h) print_help
       exit 0 ;;
    \?) print_help >&2
        exit 1 ;;
    c) client="$OPTARG" ;;
  esac
done

set -e

unbuffer_cmd=''
if command -v stdbuf >/dev/null 2>&1; then
  unbuffer_cmd='stdbuf -oL'
elif command -v unbuffer >/dev/null 2>&1; then
  unbuffer_cmd='unbuffer'
fi

# Subscribe and track changes to the pane monitored by $client.
gawk \
    -v client="$client" \
    -v subscription="refresh-client -B icon-tail::'#{pane_current_command}'" \
    -e 'BEGIN {
  cmd = sprintf("tmux -C attach-session -t '"'"'%s'"'"' -fno-output,read-only", client)
  print subscription |& cmd # kick start the tmux command-mode coprocess
  while (cmd |& getline out) {
    count = split(out, a)
    switch (out) {
    case /^%subscription-changed/:
      print a[count]
      fflush(stdout) # no buffering when in the status-line :P
      break
    case /^%client-session-changed/:
      # Make sure our icon-tracker tracks the same session as as our clients
      if (client == a[2]) {
        print ("switch-client -t " a[3]) |& cmd
      }
      break
    default:
      print out > "/dev/stderr"
      break
    }
  }
}' \
    -e 'END { close(cmd) }' |
    $unbuffer_cmd prog-icons -f
