#!/bin/bash

# systemd-timer-notify.sh - Create temporary systemd timers for notifications
# Usage: ./systemd-timer-notify.sh [OPTIONS]

set -euo pipefail

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m'

# Check if running in HyDE environment
HYDE_MODE=false
if command -v hyde-shell >/dev/null 2>&1; then
	if source "$(command -v hyde-shell)" 2>/dev/null; then
		HYDE_MODE=true
	fi
fi

# Function to print colored output
print_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
print_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Function to validate time input
validate_time() {
	local time_input="$1"
	[[ $time_input =~ ^[0-9]+[smhd]?$ ]]
}

# Function to convert time to seconds for display
time_to_seconds() {
	local time_input="$1"
	local number unit

	if [[ $time_input =~ ^([0-9]+)([smhd])$ ]]; then
		number="${BASH_REMATCH[1]}"
		unit="${BASH_REMATCH[2]}"
		case $unit in
		s) echo $number ;;
		m) echo $((number * 60)) ;;
		h) echo $((number * 3600)) ;;
		d) echo $((number * 86400)) ;;
		esac
	else
		echo "$time_input"
	fi
}

# Function to format seconds to human readable
seconds_to_human() {
	local seconds="$1"
	local days hours minutes secs result=""

	days=$((seconds / 86400))
	hours=$(((seconds % 86400) / 3600))
	minutes=$(((seconds % 3600) / 60))
	secs=$((seconds % 60))

	[[ $days -gt 0 ]] && result="${days}d "
	[[ $hours -gt 0 ]] && result="${result}${hours}h "
	[[ $minutes -gt 0 ]] && result="${result}${minutes}m "
	[[ $secs -gt 0 ]] && result="${result}${secs}s"

	echo "${result:-0s}"
}

# Function to check dependencies
check_dependencies() {
	local missing_deps=()

	command -v systemd-run >/dev/null 2>&1 || missing_deps+=("systemd")

	# Check for notification capabilities
	if ! command -v notify-send >/dev/null 2>&1 && ! command -v swaync-client >/dev/null 2>&1; then
		missing_deps+=("libnotify-bin or swaync")
	fi

	if [[ ${#missing_deps[@]} -gt 0 ]]; then
		print_error "Missing dependencies: ${missing_deps[*]}"
		[[ "${missing_deps[*]}" =~ systemd ]] && print_info "Install with: sudo apt install systemd"
		[[ "${missing_deps[*]}" =~ libnotify ]] && print_info "Install with: sudo apt install libnotify-bin"
		exit 1
	fi
}

# Function to send notification
send_notification() {
	local msg="$1"
	local title="${2:-Timer Alert}"

	# Use HyDE's notification system if available
	if command -v swaync-client >/dev/null 2>&1; then
		swaync-client -t "$title" -b "$msg"
	elif command -v notify-send >/dev/null 2>&1; then
		# Handle different user contexts
		if [[ -n "${SUDO_USER:-}" ]]; then
			sudo -u "$SUDO_USER" DISPLAY="${DISPLAY:-:0}" notify-send "$title" "$msg"
		else
			DISPLAY="${DISPLAY:-:0}" notify-send "$title" "$msg"
		fi
	fi

	# Also log for debugging
	echo "TIMER ALERT: $msg"
	logger "systemd-timer-notify: $msg" 2>/dev/null || true
}

# Function to setup Rofi configuration (HyDE integration)
setup_rofi_config() {
	[[ "$HYDE_MODE" == false ]] && return

	# Font configuration
	local font_scale="${ROFI_TIMER_SCALE:-${ROFI_SCALE:-10}}"
	[[ "${font_scale}" =~ ^[0-9]+$ ]] || font_scale=10

	font_name="${font_name:-JetBrainsMono Nerd Font}"

	font_override="* {font: \"${font_name} ${font_scale}\";}"

	# Border settings
	local hypr_border wind_border elem_border
	if command -v hyprctl >/dev/null 2>&1; then
		hypr_border=$(hyprctl -j getoption decoration:rounding 2>/dev/null | jq -r '.int' 2>/dev/null || echo "5")
		local hypr_width=$(hyprctl -j getoption general:border_size 2>/dev/null | jq -r '.int' 2>/dev/null || echo "2")
	else
		hypr_border=5
		hypr_width=2
	fi

	wind_border=$((hypr_border * 3 / 2))
	elem_border=$((hypr_border == 0 ? 5 : hypr_border))

	# Position
	if command -v get_rofi_pos >/dev/null 2>&1; then
		rofi_position=$(get_rofi_pos 2>/dev/null || echo "")
	else
		rofi_position=""
	fi

	r_override="window{border:${hypr_width}px;border-radius:${wind_border}px;}wallbox{border-radius:${elem_border}px;} element{border-radius:${elem_border}px;}"
}

# Function to get timer duration via Rofi
get_timer_duration_rofi() {
	local duration_options="30s - 30 seconds
5m - 5 minutes
15m - 15 minutes
30m - 30 minutes
1h - 1 hour
2h - 2 hours
4h - 4 hours
1d - 1 day"

	local rofi_cmd=(rofi -dmenu -i -p "Timer Duration"
		-theme-str "entry { placeholder: \"⏰ Select or type duration (e.g., 30s, 5m)\";}"
		-theme "${ROFI_TIMER_STYLE:-clipboard}")

	[[ -n "${rofi_position:-}" ]] && rofi_cmd+=(-theme-str "${rofi_position}")
	[[ -n "${font_override:-}" ]] && rofi_cmd+=(-theme-str "${font_override}")
	[[ -n "${r_override:-}" ]] && rofi_cmd+=(-theme-str "${r_override}")

	local selected_duration
	selected_duration=$(echo -e "$duration_options" | "${rofi_cmd[@]}")

	[[ -z "$selected_duration" ]] && return 1

	# Extract duration from selection or use as-is if custom input
	if [[ "$selected_duration" =~ ^[0-9]+[smhd]?[[:space:]]*- ]]; then
		echo "$selected_duration" | awk '{print $1}'
	else
		echo "$selected_duration"
	fi
}

# Function to get notification message via Rofi
get_notification_message_rofi() {
	local rofi_cmd=(rofi -dmenu -i -p "Message"
		-theme-str "entry { placeholder: \"💬 Enter notification message\";}"
		-theme "${ROFI_TIMER_STYLE:-clipboard}")

	[[ -n "${rofi_position:-}" ]] && rofi_cmd+=(-theme-str "${rofi_position}")
	[[ -n "${font_override:-}" ]] && rofi_cmd+=(-theme-str "${font_override}")
	[[ -n "${r_override:-}" ]] && rofi_cmd+=(-theme-str "${r_override}")

	local message
	message=$(echo "" | "${rofi_cmd[@]}")

	echo "${message:-Timer notification}"
}

# Function to get timer duration via terminal
get_timer_duration_terminal() {
	local duration
	while true; do
		echo -n "Enter timer duration (e.g., 30s, 5m, 2h, 1d): "
		read -r duration

		[[ -z "$duration" ]] && {
			print_warning "Duration cannot be empty"
			continue
		}

		validate_time "$duration" && break

		print_warning "Invalid time format. Use: number + unit (s/m/h/d) or just number for seconds"
		print_info "Examples: 30s, 5m, 2h, 1d, or 30 (for 30 seconds)"
	done
	echo "$duration"
}

# Function to get notification message via terminal
get_notification_message_terminal() {
	local message
	echo -n "Enter notification message: "
	read -r message
	echo "${message:-Timer notification}"
}

# Function to create notification script
create_notification_script() {
	local script_path="$1" message="$2" unit_name="$3"

	cat >"$script_path" <<'EOF'
#!/bin/bash
# Temporary notification script

set -euo pipefail

# Get display and user information
DISPLAY="${DISPLAY:-:0}"
export DISPLAY
REAL_USER="${SUDO_USER:-${USER}}"

# Function to send notification (same as main script)
send_notification() {
    local msg="$1" title="${2:-Timer Alert}"

    if command -v swaync-client >/dev/null 2>&1; then
        swaync-client -t "$title" -b "$msg"
    elif command -v notify-send >/dev/null 2>&1; then
        if [[ -n "${SUDO_USER:-}" ]]; then
            sudo -u "$REAL_USER" DISPLAY="$DISPLAY" notify-send "$title" "$msg"
        else
            notify-send "$title" "$msg"
        fi
    fi

    echo "TIMER ALERT: $msg"
    logger "systemd-timer-notify: $msg" 2>/dev/null || true
}

# Function to cleanup
cleanup() {
    local unit="$1"
    systemctl --user stop "$unit" 2>/dev/null || true
    systemctl --user reset-failed "$unit" 2>/dev/null || true
    rm -f "$0"
}

# Main execution
MESSAGE="$1"
UNIT_NAME="$2"

send_notification "$MESSAGE"
cleanup "$UNIT_NAME"
EOF

	chmod +x "$script_path"
}

# Function to create and start timer
create_timer() {
	local duration="$1" message="$2"

	# Generate unique identifiers
	local timestamp=$(date +%s)
	local random_id=$(head -c 8 /dev/urandom | tr -dc A-Za-z0-9 2>/dev/null || echo "$$")
	local unit_name="timer-notify-${timestamp}-${random_id}"

	# Create temporary script
	local script_path="/tmp/${unit_name}.sh"
	create_notification_script "$script_path" "$message" "$unit_name"

	print_info "Creating timer: $unit_name"
	print_info "Duration: $(seconds_to_human $(time_to_seconds "$duration"))"
	print_info "Message: $message"

	# Create and start the timer using systemd-run
	if systemd-run --user \
		--unit="$unit_name" \
		--on-active="$duration" \
		--timer-property=RemainAfterElapse=no \
		bash "$script_path" "$message" "$unit_name"; then

		print_success "Timer created successfully!"
		print_info "Service name: $unit_name"
		print_info "Check status: systemctl --user status $unit_name"
		print_info "Cancel: systemctl --user stop $unit_name"
		return 0
	else
		print_error "Failed to create timer"
		rm -f "$script_path"
		return 1
	fi
}

# Function to list active timers
list_timers() {
	print_info "Active notification timers:"
	if ! systemctl --user list-timers --all 2>/dev/null | grep -q "timer-notify-"; then
		print_info "No active notification timers found"
	else
		systemctl --user list-timers --all | grep "timer-notify-"
	fi
}

# Function to cleanup old timers
cleanup_old_timers() {
	print_info "Cleaning up old notification timers..."

	local cleaned=0
	local units
	units=$(systemctl --user list-units --state=failed,inactive 2>/dev/null | grep "timer-notify-" | awk '{print $1}' || true)

	while IFS= read -r unit; do
		if [[ -n "$unit" && $unit =~ timer-notify- ]]; then
			print_info "Stopping $unit"
			systemctl --user stop "$unit" 2>/dev/null || true
			systemctl --user reset-failed "$unit" 2>/dev/null || true
			((cleaned++))
		fi
	done <<<"$units"

	print_success "Cleaned up $cleaned old timers"
}

# Function to show help
show_help() {
	cat <<EOF
Usage: $0 [OPTIONS]

Options:
  --list, -l      List active notification timers
  --cleanup, -c   Cleanup old/failed timers
  --help, -h      Show this help message

Time format examples:
  30s or 30       30 seconds
  5m              5 minutes
  2h              2 hours
  1d              1 day

Features:
  - Interactive mode with Rofi (if HyDE environment detected)
  - Terminal input mode (fallback)
  - Automatic cleanup of timer scripts
  - Integration with swaync and libnotify
EOF
}

# Main function
main() {
	# Handle command line arguments
	case "${1:-}" in
	--list | -l)
		list_timers
		exit 0
		;;
	--cleanup | -c)
		cleanup_old_timers
		exit 0
		;;
	--help | -h)
		show_help
		exit 0
		;;
	esac

	print_info "systemd Timer Notification Script"

	# Check dependencies
	check_dependencies

	# Determine interface mode and get inputs
	local duration message

	if [[ "$HYDE_MODE" == true ]] && command -v rofi >/dev/null 2>&1 && [[ -n "${DISPLAY:-}" ]]; then
		print_info "Using Rofi interface"
		setup_rofi_config

		duration=$(get_timer_duration_rofi) || {
			print_info "Operation cancelled"
			exit 0
		}

		if ! validate_time "$duration"; then
			print_error "Invalid duration format: $duration"
			exit 1
		fi

		message=$(get_notification_message_rofi)
	else
		print_info "Using terminal interface"
		duration=$(get_timer_duration_terminal)
		message=$(get_notification_message_terminal)
	fi

	# Create and start timer
	create_timer "$duration" "$message"
}

# Handle Ctrl+C gracefully
trap 'echo; print_info "Operation cancelled"; exit 130' INT

# Run main function
main "$@"
