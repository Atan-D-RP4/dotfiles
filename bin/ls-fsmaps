#!/usr/bin/env bash
# Using my configured file system aliases, echo all directory aliases
# alongside the absolute directory they point to in PATH like form.

print_usage() {
  echo "Usage: $(basename "$0") [-h] [-r] [-e|-f|-d]"
}

print_help() {
  print_usage
  echo ""
  echo "Using my configured aliases, filter out all filesystem"
  echo "aliases and present them to the user with env-variables"
  echo "properly expanded."
  echo ""
  echo "Options:"
  echo "  -h    Show this help message and exit"
  echo "  -r    Replace '$HOME' with ~/ before outputting"
  echo "  -e    Only show dirmaps that currently exist."
  echo "  -f    Only show dirmaps that currently exist as files"
  echo "  -d    Only show dirmaps that currently exist as directories"
}

# shellcheck disable=SC2016
exists_cmd='while read -r p; do if [ -e "$p" ]; then echo "$p"; else echo; fi; done'
envsubst_cmd='envsubst'
while getopts 'hrefd' option; do
  case "$option" in
    h) print_help
       exit 0 ;;
    \?) print_help >&2
        exit 1 ;;
    r) home_relative=1 ;;
    e) exists_only=1 ;;
    d) exists_only=1
       # shellcheck disable=SC2016
       exists_cmd='while read -r p; do if [ -d "$p" ]; then echo "$p"; else echo; fi; done' ;;
    f) exists_only=1
       # shellcheck disable=SC2016
       exists_cmd='while read -r p; do if [ -f "$p" ]; then echo "$p"; else echo; fi; done' ;;
  esac
done

has_stdbuf=0
if command -v stdbuf >/dev/null 2>&1; then
  envsubst_cmd="stdbuf -oL $envsubst_cmd"
  has_stdbuf=1
fi

. build-aliases
# shellcheck disable=2046
read_script $(ls-aliases) |
  awk -v check_exists="$exists_only" \
      -v home_relative="$home_relative" \
      -v home="$HOME" \
      -v sep=":" \
      -v envsubst="$envsubst_cmd" \
      -v has_stdbuf="$has_stdbuf" \
      -v exists_cmd="$exists_cmd" \
      -e 'BEGIN {
if (!has_stdbuf) # disable buffering
  PROCINFO[envsubst, "pty"] = 1
}' \
      -e '$1 ~ /@dirx|@file$/ {
  key = substr($1, 0, length($1)-5)

  path = ""
  for (i=2; i <= NF; i++) {
    path = path (i > 2 ? FS : "") $i
  }
  print path |& envsubst
  envsubst |& getline path

  # skip path when destination is empty.
  if (path ~ /^\s*$/) next

  # expand path when checking whether it exists
  if (path == "~" || path ~ /^~\//) {
    path = home substr(path, 2)
  }

  if (check_exists) {
    # pass through an exists cmd to assert whether a path
    # exists. exists_cmd should output one line for every
    # input line. The output should be empty if the path
    # does not exist.
    print path |& exists_cmd
    exists_cmd |& getline path

    if (path ~ /^\s*$/) next
  }

  if (home_relative && index(path, home) == 1) {
    path = "~" substr(path, length(home)+1)
  }

  print key sep path
}'
