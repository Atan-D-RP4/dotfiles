#!/usr/bin/env bash
# -*- +indent: 2 -*-

print_usage() {
  echo "Usage: $(basename "$0") [-h] [-d SEP] [-p FORMAT] [-C]"
}

print_help() {
  print_usage
  cat <<-EOF

Optional arguments:
  -d SEP
    Specify seperator for the URL, tags, and output
  -p FORMAT
    Pretty print parsed output. FORMAT should be a
    string containing the following to include them
    in the output: {h: host, #: tags, t: title}
  -C
    Remove color codes from pretty-printed output
  -a
    List all bookmarks, including excluded ones.
EOF
}

# Delimiter for outputted fields.
d=$'\t'

# Color codes for pretty printed output
c_tag_l=$'\e[1m'
c_tag_r=$'\e[0m'
c_title_l=""
c_title_r=""
c_url_l=$'\e[32m'
c_url_r=$'\e[0m'

LS_BOOKMARKS_EXCLUDE_FILE="${XDG_CONFIG_HOME:-$HOME/.config}/ls-bookmarks.exclude"

# Exclude is a list of colon-delimited regular expressions each one
# is checked against the tags of each bookmark and if they match then
# it is excluded from being output. This can be set in a config file,
# and also an environment variable. Each concatenating onto the previous.
exclude=
if [ -e "$LS_BOOKMARKS_EXCLUDE_FILE" ]; then
  exclude="$(tr '\n' : < "$LS_BOOKMARKS_EXCLUDE_FILE"):$exclude":
fi
if [ -n "$LS_BOOKMARKS_EXCLUDE" ]; then
  exclude="$LS_BOOKMARKS_EXCLUDE:$exclude"
fi
if [ -z "$exclude" ]; then
  # Set an apropriate default if none of the other methods are supported.
  exclude='^H$'
fi

while getopts 'had:p:C' OPTION; do
  case "$OPTION" in
    h) print_help
       exit 0 ;;
    d) d="$OPTARG" ;;
    p) if [ -n "$OPTARG" ]; then
         pretty_print="$OPTARG"
       else
         pretty_print="1"
       fi
       ;;
    C) c_tag_l=''
       c_tag_r=''
       c_title_l=''
       c_title_r=''
       c_url_l=''
       c_url_r=''
       ;;
    a) exclude='' ;;
    *) print_help >&2
       exit 1 ;;
  esac
done

shopt -s nullglob

# All the chromium variants generally have the same format for
# bookmark files so this is a generic function for outputting
# bookmarks for all chromium browsers.
#
# Each argument contains the path information for a single chromium
# variant (eg. brave). It should be a : delimited list with the first
# value being the browser name and the rest being a series of paths to
# check for a bookmark file.
do_chromium() { # ([browser:path1:path2...]...)
  # jq script sourced from [[https://github.com/junegunn/fzf/wiki/Examples#google-chrome-os-xlinux][here]].
  # We cat out all the paths to avoid spawning more than
  # one jq process when working with multiple browsers.
  for arg in "$@"; do
    local browser paths
    local IFS=
    IFS=: read -r browser paths <<< "$arg"
    while read -r it; do
      # shellcheck disable=SC2086
      if [ -e $it ]; then
        cat $it; break
      fi
    done <<< "${paths//:/$'\n'}"
  done |
    jq -r \
       --arg sep "$d" \
       'def ancestors: while(. | length >= 2; del(.[-1,-2]));
        . as $in
        | paths(.url?) as $key
        | $in
        | getpath($key)
        | {name,url, path: [$key[0:-2] | ancestors as $a | $in | getpath($a) | .name?] | reverse | join("/") | sub("^Bookmarks/?"; "") }
        | [.url, .path, .name]
        | join($sep)'
}

do_firefox() {
  # bookmarks are stored as an sqlite3 db, so we're gonna need sqlite3
  # to extract the URLs in a readable format.
  command -v sqlite3 >/dev/null 2>&1 || return 1

  # temporary directory for locked db files.
  local tempdest=

  for arg in "$@"; do
    # shellcheck disable=2034
    IFS=: read -r browser paths <<< "$arg"
    while read -r it; do
      # shellcheck disable=SC2086
      [ -f $it ] || continue

      # firefox and torbrowser have this weird issue where whenever
      # you're running the browser the entire bookmarks file is locked
      # so you can't even read it. For now I just copy it.
      # shellcheck disable=SC2086
      if ! sqlite3 $it "BEGIN IMMEDIATE" >/dev/null 2>&1; then
        # make the temp directory for db copies.
        if [ -z "$tempdest" ]; then
          tempdest=$(mktemp -d)
          # shellcheck disable=SC2064
          trap "rm -rf $tempdest" EXIT
        fi
        cp -f $it "$tempdest/db"
        it="$tempdest/db"
      fi

      # This beheamoth of an SQL query returns the url, folder path, and title for a
      # bookmark from a mozilla formatted SQL places database.
      #
      # moz_bookmarks stores both bookmarked urls and the folder structure of a bookmark
      # (as a foreign key relation back onto the table itself). Here I'm using a recursive
      # CTE (introduced in sqlite 3.8.3) which simply goes through all the foreign key
      # relations and then concatenates each folders name with /.
      #
      # NOTE: moz_places and moz_bookmarks both store a title field, but the bookmarks
      # one seems to be the one used in the browser window so that's the one I'm using
      # here.
      # shellcheck disable=2086
      sqlite3 -separator "$d" $it '
SELECT url, (
  SELECT group_concat(z, "/") FROM (
    WITH RECURSIVE tree(x, y, z) AS
      (SELECT id, parent, title FROM moz_bookmarks WHERE id = bm.parent
       UNION ALL
       SELECT id, parent, title FROM tree,moz_bookmarks where id = y)
    SELECT z FROM tree ORDER BY x ASC LIMIT -1 OFFSET 2
  )
) AS tags, bm.title
FROM moz_places as places
INNER JOIN moz_bookmarks as bm ON places.id == bm.fk;'
      break
    done <<< "${paths//:/$'\n'}"
  done
}

do_buku() {
  command -v buku >/dev/null 2>&1 || return 1
  # Honestly I'm not a big fan of some parts of buku. The fact it automatically starts
  # an interactive session by default, when for all intents and purposes it's a bookmark
  # query engine, is one of the most annoying parts to me. But an even more annoying gripe
  # is it doesn't maintain sanitary output control. Even when you ask it to output JSON it
  # up and decides to include a message "Waiting for input" before that when standard input
  # isn't a terminal.
  #
  # Set aside the fact that what STDIN is shouldn't change the behaviour of the program, it
  # just makes bukus output completely unusable in a JSON pipeline. The suggested workaround
  # is to just [[https://github.com/jarun/buku/issues/447][dump to a file]] and read from there but I'm not about to introduce temporary file management
  # to this script.
  #
  # Instead for now I'll add a process overhead that detects and removes the leading prompt.
  # Not ideal... but it works :cry:.

  buku --print --format 4 --json --np 2>/dev/null |
    awk -e 'NR != 1 || $0 !~ /^waiting for input$/' |
    jq --arg sep "$d" -r \
       '.[]
        | [.uri, .tags, .title]
        | join ($sep)' 2>&1
}

pretty_print() {
  gawk -F "$d" \
       -v sep="$d" \
       -v tag_l="$c_tag_l" \
       -v tag_r="$c_tag_r" \
       -v title_l="$c_title_l" \
       -v title_r="$c_title_r" \
       -v url_l="$c_url_l" \
       -v url_r="$c_url_r" \
       -v fmt="$1" \
       -e 'BEGIN {
  show_tags=1; show_title=1; show_host=1
  if (fmt != "1") {
    show_tags = match(fmt, /#/)
    show_title = match(fmt, /t/)
    show_host = match(fmt, /h/)
  }
}' \
       -e '{
  url=$1; tags=$2; title=$3

  printf("%s%s", url, sep)

  if (show_tags && tags) {
    printf("%s(%s)%s ", tag_l, tags, tag_r)
  }

  if (show_title) {
    printf("%s%s%s", title_l, title ? title : url, title_r)
  }

  if (show_host && title != "" && match(url, /https?:\/\/(www\.)?([^/]*)/, a)) {
    printf(" [%s%s%s]", url_l, a[2], url_r)
  }

  print ""
}'
}

{ # NOTE: These are ordered based on how quickly the response is expected to take.
  # For now I just do brave browser on linux, I'll add cases for windows
  # and other chromium derivatives as I encounter them.
  do_chromium "brave:$XDG_CONFIG_HOME/BraveSoftware/Brave-Browser/Default/Bookmarks"
  do_firefox "firefox:$HOME/.mozilla/firefox/*/places.sqlite" \
             "tor:$HOME/.tor-browser/app/Browser/TorBrowser/Data/Browser/*/places.sqlite" \
             "librewolf:$HOME/.librewolf/*/places.sqlite"
  do_buku
} |
  if [ -z "$exclude" ]; then cat; else
    gawk -F "$d" \
         -v IGNORECASE=1 \
         -v exc_var="$exclude" \
         -e 'BEGIN { exc_count = split(exc_var, exc, ":") }' \
         -e '{
  for (i = 1; i <= exc_count; i++) {
    if (!exc[i]) continue;
    tag_count = split($2, tags, ",")
    for (j = 1; j <= tag_count; j++) {
      if (match(tags[j], exc[i]) != 0) {
        next
      }
    }
  }

  print($0)
}'
  fi |
  if [ -z "$pretty_print" ]; then cat; else pretty_print "$pretty_print"; fi
