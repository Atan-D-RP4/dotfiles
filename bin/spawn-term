#!/bin/sh
# Creates a new floating terminal for interactive program execution.

# forked from: https://github.com/oem/dotfiles/blob/master/fuzzy/fuzzy_win
if [ "$#" -eq 0 ]; then
    echo "spawn-term: error requires an execution argument" >&2
    exit 1
fi

print_usage() {
    echo "Usage: $0 [-h] [-r ROWS] [-c COLS] [-n NAME] CMD [...ARGS]"
}

print_help() {
    cat <<-EOF

  Create a new floating terminal window.

Positional Arguments:
  CMD    execute command in new window
  ARGS   arguments passed to CMD

Options:
  -h         print this help message and exit
  -r ROWS    number of rows in the new window
  -c COLS    number of columns in the new window
  -n NAME    name of new floating window
EOF
}

rows=15
cols=30
window_name="${TERMINAL:-URxvtFuzzy}"

while getopts 'hr:c:n:' OPTION; do
    case "$OPTION" in
        h) print_help
           exit 0 ;;
        \?) print_usage >&2
            exit 1 ;;
        r) rows=$OPTARG ;;
        c) cols=$OPTARG ;;
        n) window_name=$OPTARG ;;
    esac
done

shift "$((OPTIND-1))"
geometry="${cols}x${rows}+400+1"

urxvt_cmd() {
    cmd=urxvt
    if urxvtc -h >/dev/null 2>&1; then
        # Spawn through the urxvtd daemon when running
        cmd=urxvtc
    fi
    exec "$cmd" -name "$window_name" -geometry "$geometry" -e "$@"
}

st_cmd() { exec st -n "$window_name" -g "$geometry" -e "$@"; }

kitty_cmd() { exec kitty --name "$window_name" "$@"; }

term_cmd=${TERMINAL}_cmd
if ! command -v "$term_cmd" >/dev/null 2>&1; then
    term_cmd=st_cmd
fi

$term_cmd "$@"
