#!/usr/bin/env bash
# Select an open terminal smartly.
#
# If there aren't any open terminals, create a new one. If there's only
# one select it, otherwise cycle through open terminal instances on each
# invocation.
#
# For cycling, terminals are ordered firstly by their workspace; with the
# current workspace having the highest priority and then going in order
# through remaining workspaces (eventually wrapping back around to the
# first workspace if necessary).
#

print_usage() {
    echo "$0 [-h] [-t TERM]"
}

while getopts 'ht:' OPTION; do
    case "$OPTION" in
        h) print_usage
           exit 0 ;;
        \?) print_usage >&2
            exit 1 ;;
        t) term=$OPTARG
           ;;
    esac
done

windows=$(app-windows "${term:-st-256color}")

if [ -z "$windows" ]; then
    # no open terminals, let's make one :smile:.
    st & disown
    exit $?
fi

if [ "$(<<< "$windows" wc -l)" -eq 1 ]; then
    active_window="$windows"
else
    # read a bunch of useful options used for configuration here.
    IFS=':' read -r desk desk_count active_window_pid rest \
       < <(xdotool get_desktop get_num_desktops getwindowfocus getwindowpid | tr '\n' :)

    # sort all the windows relative to the current workspace.
    windows=$(<<< "$windows" \
              awk -v workspace="$desk" \
                  -v workspace_count="$desk_count" \
                  -e 'BEGIN { entries[1] = ""; count = 0; }' \
                  -e '{
  entries[++count] = sprintf("%d %s", ($2-workspace >= 0) ? $2-workspace : $2+workspace_count, $0);
}' \
                  -e 'END {
  asort(entries, entries, "@val_num_asc")
  for (i=1; i <= count; i++) {
    pos = index(entries[i], " ")
    print substr(entries[i], pos+1)
  }
}')

    if [[ "$(<<< "$windows" cut -d ' ' -f3)" =~ "$active_window_pid" ]]; then # shellcheck disable=2076
        # currently on a terminal, try to select the next terminal in the list.

        active_window_wid=$(printf "%x" "$(xdotool getwindowfocus)")
        # find the current row for the current terminal, then print the next row
        active_window=$(<<< "$windows" \
                          awk -e '
$1 ~ /(0x)?0*'"$active_window_wid"'/ {
  if ((getline nxt) > 0) {
     print nxt
  } else {
     print "\n"
  }
  exit
}')

        # when the next row is empty (I.E. we were on the last row), select the first one
        [ -z "$active_window" ] && active_window=$(<<< "$windows" head -n1)
    else
        active_window=$(<<< "$windows" head -n1)
    fi
fi

[ -n "$active_window" ] && wmctrl -ia "$(cut -d ' ' -f 1 <<< "$active_window")"
