#!/usr/bin/env bash
# ern - Enuemerate ReName
#
# A bulkrename shortcut for making it easier to number files.
# By default this program follows the windows convention for
# numbering files (appending '(num)' after the file name).
#
# This is fundamentally a bulkrename shortcut. All it does is
# setup a pre-command for bulkrenames edit index that numbers
# the files in the order it recieves them. Supplying the files
# to be numbered follows the same convention as bulkrename and
# guaranteeing the order of them to match the number that's
# assigned to them is left to the caller.

print_usage() {
    echo "Usage: $(basename "$0") [-h] [-n NUM] [-f FORMAT] [...BULKRENAME_ARGS]"
}

print_help() {
    print_usage
    echo ""
    echo "Optional Arguments:"
    echo " -h        Show this help message and exit."
    echo " -n NUM    Start counting from NUM."
    echo " -f STR"
    echo "      Printf format string for filenames. Takes 3"
    echo "      parameters in order: (basename, number, ext)."
    echo "      You can remove the basename with '%0.s%d%s'"
}

count=1
format="%s (%d)%s"
while getopts 'hn:f:' OPTION; do
    case "$OPTION" in
        h) print_usage
           exit 0 ;;
        n) count="$OPTARG" ;;
        f) format="$OPTARG" ;;
        \?) print_usage >&2
            exit 1 ;;
    esac
done
shift $((OPTIND - 1))

read -r -d '' renum_script <<EOF
awk -F=/ \
    -i inplace -v INPLACE_SUFFIX=.bak \
    -v count="$count" \
    -v format="$format" \
    -e '
{
  # print out dirname as is.
  for (i=1; i < NF; i++) {
    printf("%s", \$i)
  }

  ext_pos = index(\$NF, ".")
  if (ext_pos <= 1) {
    # no extension, basename is entire path.
    # or path is a dotfile.
    ext = ""
    basename = \$NF
  } else {
    ext = substr(\$NF, ext_pos)
    basename = substr(\$NF, 1, ext_pos-1)
  }

  printf(format "\n", prefix ? prefix : basename, count++, ext)
}
' "\$1"
EOF

bulkrename -x "$renum_script" "$@"
