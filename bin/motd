#!/usr/bin/env bash
# Sample motd *Message of the Day* script to invoke on SSH logins.
#
# You can install this script at the end of your login profile /etc/profile
# ~/.profile (and/or ~/.bash_profile) or globally for all users using PAM
# by adding the following to `/etc/pam.d/system-login`:
#   session    optional   pam_exec.so          stdout /usr/bin/scripts/motd.sh

set -eu -o pipefail

# Color codes
magenta=$(echo -e "\e[35m")
magenta_bright=$(echo -e "\e[1;35m")
red_bright=$(echo -e "\e[1;31m")
blue=$(echo -e "\e[34m")
blue_bright=$(echo -e "\e[1;34m")
yellow_bright=$(echo -e "\e[1;33m")
green_bright=$(echo -e "\e[1;32m")
reset=$(echo -e "\e[0m")

colorize-for-size() { # (value size LIMIT:COLOR)
  local value="$1" size="$2" spec limit color
  shift
  shift
  for spec in "$@"; do
    IFS=: read -r limit color <<< "$spec"
    if [ "$size" -ge "$limit" ]; then
      echo "$color$value$reset"
      return 0
    fi
  done
  echo "$size"
}

# Print a nice banner with the hostname
hostname=$(cat /etc/hostname)
if ! banner=$(cat /etc/motd-banner 2>/dev/null); then
  if command -v pyfiglet >/dev/null 2>&1; then
    banner=$(pyfiglet --width=1000 --font=cricket --strip-surrounding-newlines "$hostname")
  else
    banner="$hostname"
  fi
fi

banner_border=$(
  awk -e 'BEGIN { m = 0 }' \
      -e '{ if (length($0) > m) m = length($0) }' \
      -e 'END {
  if (m < 10) {
    m = 10
  }

  printf("#")
  for (i = 0; i < m-2; i++) {
    printf("=")
  }
  printf("#")
}' \
  <<< "$banner")

echo "$banner_border"
printf '%s\n\n' "$magenta$banner$reset"
echo "$banner_border"

# MOTD summary sections
echo "Login:      $blue_bright${PAM_USER:-$USER}$reset"

package-counts() {
  if command -v pacman >/dev/null 2>&1; then
    echo "$(pacman -Q | wc -l):$(pacman -Qu | wc -l)"
  else
    return 1
  fi
}
if package_count=$(package-counts); then
  IFS=: read -r package_count upgrade_count <<< "$package_count"
  printf \
    "Packages:   %s (%s can be updated)\n" \
    "$magenta_bright$package_count$reset" \
    "$magenta_bright$upgrade_count$reset"
fi

echo "Kernel:     $(uname -rm)"
echo "Uptime:     $(uptime -p)"

disk-use-with-color() {
  disk_use=$(df --output=pcent / | sed -e 1d -e 's/ *//' -e 's/%//')
  colorize-for-size \
    "$disk_use%" \
    "$disk_use" \
    "90:$red_bright" \
    "80:$yellow_bright" \
    "0:$green_bright"
}
echo "Disk Use:   $(disk-use-with-color)"

# Trailing banner border
echo "$banner_border"
