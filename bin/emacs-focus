#!/usr/bin/env bash
# shell script to switch focus to emacs frames, cycling forward or
# backwards between open frames when you're currently already in a
# frame.

print_usage() {
    cat <<-EOF
Usage: dotsync [-h] [-a] [-b] [-c]

Optional arguments:
  -h    print this help message and exit
  -a    only work on frames in this desktop
  -b    go backwards through the frame list
  -c    create a new frame if one doesn't exist
EOF
}

create_frame=0 toggle_backwards=0 filter_by_desktop=1
while getopts 'abch' OPTION; do
    case "$OPTION" in
        a) filter_by_desktop=0 ;;
        b) toggle_backwards=1 ;;
        c) create_frame=1 ;;
        h) print_usage
           exit 0 ;;
        \?) print_usage >&2
           exit 0 ;;
    esac
done

host=$(hostname)

# all the open emacs frames or tmux clients showing an emacs frame in the current pane.
emacs_windows=$(app-windows -t 'emacs@'"$host"'|tmux@'"$host"' \\[.+:[[:digit:]]+\\] emacs')

get_next_emacs_frame() { #(active_window_wid)
    # retrieves the wmctrl row entry for the next emacs window
    # this method also handles logic for moving forwards or
    # backwards and makes sure to wrap around to the first or
    # last known window when the end or beginning is reached.

    if [ "$toggle_backwards" -eq 1 ]; then
        # shellcheck disable=2016
        awk_script='{ print prev; exit }; { prev=$0 }'
        wraparound_command="tail -n 1" # back to bottom when top of list reached
    else
        awk_script='{
  if ((getline nxt) > 0) {
     print nxt
  } else {
     print "\n"
  }
  exit
}'
        wraparound_command="head -n 1" # back to top when bottom of list reached
    fi

    next_row=$(<<< "$emacs_windows" \
                 awk -e '$1 ~ /(0x)?0*'"$1"'/ '"$awk_script")

    if [ -n "$next_row" ]; then
        echo "$next_row"
    else
        echo "$emacs_windows" | $wraparound_command
    fi
}

if [ -z "$emacs_windows" ]; then
    # begin in current dekstop when there's no frame to toggle
    [ "$create_frame" -eq 1 ] && emacs-make-frame
else
    active_desktop=$(wmctrl -d | grep -P '\*' | cut -d ' ' -f 1)

    if [ "$filter_by_desktop" -eq 1 ]; then
        # only work on those in current desktop when a frame in this
        # desktop exists & filter_by_desktop is true.

        in_current_desktop=$(<<< "$emacs_windows" awk -e '$2 == '"$active_desktop")
        [ -z "$in_current_desktop" ] || emacs_windows=$in_current_desktop
    fi

    if [ "$(<<< "$emacs_windows" wc -l)" -eq 1 ]; then
        # only one emacs window is open, simply toggle it
        wmctrl -ia "$(<<< "$emacs_windows" cut -d ' ' -f 1)"
    else
        active_window_pid=$(xdotool getwindowfocus getwindowpid)

        if [ -z "$(<<< "$emacs_windows" awk -e '$3 == '"$active_window_pid")" ]; then
            # currently active window isn't emacs, so activate first match
            wmctrl -ia "$(<<< "$emacs_windows" head -n 1 | cut -d ' ' -f 1)"
        else
            active_window_wid=$(printf "%x" "$(xdotool getwindowfocus)")
            wmctrl -ia "$(get_next_emacs_frame "$active_window_wid" | cut -d ' ' -f 1)"
        fi
    fi
fi
