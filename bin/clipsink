#!/usr/bin/env python3-dotfiles-venv
"""
Monitor changes to the system clipboard and print them to stdout.
"""

import asyncio
import codecs
import json
import logging
import sys
from typing import Callable, Coroutine, List, Optional

import pyperclip as clip

DEFAULT_READ_INTERVAL = 0.5


def _identity(value: str) -> str:
    """Return argument as is."""
    return value


class Clipsink:
    """
    Asynchronous clipboard monitor.

    This class has a main function which when invoked will periodically inspect
    the value of the clipboard and invoke the `on_new_clip` method for each new
    clipboard change to it.

    Fields
    ------
    read_interval
        Minimum period in seconds between clipboard value checks.
    read_initial_clip
        Whether to invoke the handler on the first clipboard value. By default
        this class only handles values from the next clipboard change going forward
        (assuming the current value hasn't been assigned yet).
    stop_event
        Stop event which when set will terminate the clipsink loop. This can be
        supplied to the constructor or a default event will be initialised if not
        supplied.
    """

    def __init__(
        self,
        read_interval: int = DEFAULT_READ_INTERVAL,
        read_initial_clip: bool = False,
        stop_event: Optional[asyncio.Event] = None,
    ) -> None:
        self.read_interval = read_interval
        self.read_initial_clip = read_initial_clip

        if stop_event is not None:
            self.stop_event = stop_event
        else:
            self.stop_event = asyncio.Event()

    async def main(self) -> None:
        """Main clipsink entrypoint."""
        tasks = []

        await self.before_start()

        try:
            tasks.append(asyncio.create_task(self._clip_loop()))

            await self._add_tasks(tasks)

            # Either wait for exit_event or loop forever.
            await self.stop_event.wait()
            # Cancel any pending coroutines before exitting.
            for task in tasks:
                task.cancel()
        finally:
            await self.before_end()

    async def _add_tasks(self, tasks: List[Coroutine]) -> None:
        """Optional method that can be used to allow subclasses to register tasks."""

    async def _clip_loop(self) -> None:
        """Asynchronously read the clipboard value at periodic intervals.

        This function checks the value of the clipboard at interval increments
        and invokes the `on_new_clip` handler it if its value has changed from
        the last time it was read.
        """
        logging.debug("Started clip loop")
        last = clip.paste()
        if self.read_initial_clip:
            logging.debug("Handling initial clipboard value='%s'", last)
            await self.on_new_clip(last)

        while True:
            await asyncio.sleep(self.read_interval)
            logging.debug("Awoke clipboard monitor")
            current = clip.paste()
            logging.debug("Read value='%s' from clipboard", current)
            if last != current:
                await self.on_new_clip(current)
                last = current

    async def before_start(self) -> None:
        """Event handler before clipsink starts."""

    async def before_end(self) -> None:
        """Event handler before clipsink stops."""

    async def on_new_clip(self, clip: str) -> None:
        """Event handler for new clipboard entries."""


class MonitorStdinClipsink(Clipsink):
    """Clipsink which also reads lines from stdin and sets the stop event on EOF.

    Fields
    ------
    monitor_stdin
        Flag which when True stdin will be monitored. Set to False to prevent
        stdin monitoring.
    """

    def __init__(
        self,
        read_interval: int = DEFAULT_READ_INTERVAL,
        read_initial_clip: bool = False,
        stop_event: Optional[asyncio.Event] = None,
        monitor_stdin: bool = False,
    ) -> None:
        super().__init__(read_interval, read_initial_clip, stop_event)
        self.monitor_stdin = monitor_stdin

    async def _add_tasks(self, tasks) -> None:
        await super()._add_tasks(tasks)

        if self.monitor_stdin:
            logging.info("Creating stdin monitor")
            tasks.append(asyncio.create_task(self._stdin_loop()))

    async def _stdin_loop(self):
        """Continually read from stdin and invoke handlers on events.

        Reads line from stdin asynchronously, invoking `on_stdin_read` for each
        new line that has been read and `on_stdin_eof` when stdin is exhausted.
        This coroutine will only run if the `monitor_stdin` parameter has been
        set on this class.
        """
        logging.debug("Started stdin monitor loop")

        # Stdin monitor adapted from [[https://stackoverflow.com/a/64317899][here]].
        reader = asyncio.StreamReader()
        protocol = asyncio.StreamReaderProtocol(reader)
        loop = asyncio.get_event_loop()
        await loop.connect_read_pipe(lambda: protocol, sys.stdin)

        # StreamReader will automatically exit the for-loop when it reaches
        # EOF, however if there are any other issues while reading from stdin
        # we'd like to kill the clip loop as well so we use try finally instead.
        try:
            async for line in reader:
                await self.on_stdin_read(line)
        finally:
            await self.on_stdin_eof()

    async def on_stdin_read(self, line: str) -> None:
        """Event handler for newly read lines from stdin."""
        logging.debug("Read line='%s' from stdin", line)

    async def on_stdin_eof(self) -> None:
        """Event handler for stdin EOF."""
        self.stop_event.set()


class PrintClipsink(MonitorStdinClipsink):
    """Clipsink which prints clipboard entries to stdout.

    Fields
    ------
    line_buffer
        Flush the stdout stream after each newly printed line.
    delimiter
        Suffix used to delimit the end of an entry (example: '\\n').
    predicate
        Optional predicate that a clipboard entry must match before it is
        printed out.
    formatter
        Pre-format each clipboard entry with this function before printing it.
    """

    def __init__(
        # pylint: disable=too-many-arguments
        self,
        read_interval: int = DEFAULT_READ_INTERVAL,
        read_initial_clip: bool = False,
        stop_event: Optional[asyncio.Event] = None,
        monitor_stdin: bool = False,
        line_buffer: bool = False,
        delimiter: str = "\n",
        predicate: Optional[Callable[[str], bool]] = None,
        formatter: Callable[[str], str] = _identity,
    ) -> None:
        super().__init__(read_interval, read_initial_clip, stop_event, monitor_stdin)

        self.line_buffer = line_buffer
        self.delimiter = delimiter
        self.predicate = predicate
        self.formatter = formatter

    async def on_new_clip(self, clip: str) -> None:
        if self.predicate and not self.predicate(clip):
            logging.debug(
                "Input line='%s' didn't satisfy predicate=%s", clip, self.predicate
            )
            return

        print(self.formatter(clip), end=self.delimiter)

        if self.line_buffer:
            sys.stdout.flush()


if __name__ == "__main__":
    import argparse

    def parse_args():
        """Parse command line arguments."""
        parser = argparse.ArgumentParser(
            description="""
Periodically inspect and output the contents of the system clipboard.
            """
        )

        parser.add_argument(
            "-",
            "-m",
            "--monitor-stdin",
            action="store_true",
            help="Terminate print loop when stdin recieves EOF.",
        )
        parser.add_argument(
            "-i",
            "--interval",
            type=int,
            default=DEFAULT_READ_INTERVAL,
            help="How long to wait between checking for changes.",
        )
        parser.add_argument(
            "-1",
            "--first",
            action="store_true",
            help="Print the current value of the clipboard on startup.",
        )

        logging_group = parser.add_argument_group(
            "Logging", "Configure debugging output"
        )
        logging_group.add_argument(
            "--log-level",
            metavar="LEVEL",
            default=logging.FATAL,
            type=lambda x: getattr(logging, x.upper()),
            help="Set verbosity of logging output",
        )

        output_group = parser.add_argument_group(
            "Output", "Configure clipboard outputting"
        )

        output_group.add_argument(
            "-j",
            "--json",
            dest="formatter",
            action="store_const",
            const=json.dumps,
            help="Print clipboard contents as JSON lines.",
        )
        output_group.add_argument(
            "-p",
            "--plain",
            dest="formatter",
            action="store_const",
            const=_identity,
            help="Print clipboard entries as they are.",
        )
        output_group.add_argument(
            "-l",
            "--line-buffer",
            action="store_true",
            help="Automatically flush entries after writing.",
        )

        delimiter_group = output_group.add_mutually_exclusive_group()
        delimiter_group.add_argument(
            "-d",
            "--delimiter",
            default="\\n",
            help="Delimiter between outputted entries.",
        )
        delimiter_group.add_argument(
            "-0",
            "--null",
            action="store_const",
            const="\\0",
            dest="delimiter",
            help="Seperate clipboard entries with null.",
        )

        argsv = parser.parse_args()

        argsv.delimiter = codecs.decode(argsv.delimiter, "unicode_escape")
        argsv.formatter = argsv.formatter or _identity

        return argsv

    args = parse_args()

    level = args.log_level
    try:
        from mohkale.pylog.config import use_config as use_logging_config
    except ImportError:
        logging.basicConfig(level=level)
    else:
        use_logging_config("clipsink", level=level)

    def pred(line: str) -> bool:
        """Predicate on clipboard entries."""
        return line.strip() != ""

    try:
        asyncio.run(
            PrintClipsink(
                read_interval=args.interval,
                read_initial_clip=args.first,
                monitor_stdin=args.monitor_stdin,
                line_buffer=args.line_buffer,
                delimiter=args.delimiter,
                predicate=pred,
                formatter=args.formatter,
            ).main()
        )
    except KeyboardInterrupt:
        logging.error("Encountered keyboard interrupt")
        sys.exit(1)
