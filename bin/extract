#!/usr/bin/env bash
# A quick and dirty multipurpose archive extracter. Takes only one arg, the path to
# extract.

set -f -e -o pipefail

print_usage() {
  echo "Usage: $(basename "$0") [-h] [-o DIR] FILE [FILE...]"
}

print_help() {
  print_usage
  cat <<-EOF

Positional arguments:
  FILE
    Path to archive file that should be extracted. Supply - to read FILE
    from stdin until EOF.

Options
  -h
    Show this help message and exit
  -o DIR
    Set base directory to extract archives into when supported
    (default "$(pwd)").
EOF
}

output_dir=$(pwd)
while getopts 'ho:' OPTION; do
  case "$OPTION" in
    h) print_help
       exit 0 ;;
    \?) print_usage >&2
        exit 1 ;;
    o) output_dir="$OPTARG" ;;
  esac
done

extract_archive() { #(archive)
  local archive_file="$1"
  local output_dir="$2"
  case "$archive_file" in
    # [[https://xkcd.com/1168/][xkcd]]
    *.tar.bz|*.tar.bz2|*.tbz|*.tbz2)
      tar -xjvf "$archive_file" -C "$output_dir" ;;
    *.tar.gz|*.tgz)
      tar -xzvf "$archive_file" -C "$output_dir" ;;
    *.tar.xz|*.txz)
      tar -xJvf "$archive_file" -C "$output_dir" ;;
    *.tar|*.tar.*|*.cbt|*.gem)
      tar -xvf "$archive_file" -C "$output_dir" ;;
    *.zip|*.cbz)
      unzip "$archive_file" -d "$output_dir" ;;
    *.jar)
      jar xf "$archive_file" ;;
    *.rar|*.cbr)
      unrar x -op"$output_dir" "$archive_file" ;;
    *.cab)
      cabextract -d "$output_dir" "$archive_file" ;;
    *.cb7|*.7z|*.c7z)
      7z x -o"$output_dir" "$archive_file" ;;
    *.zst)
      unzstd "$archive_file" ;;
    *.rpm)
      rpm2cpio "$archive_file" | cpio -idmv ;;
    *) echo "error: extract: unknown archive format for file='$archive_file'" >&2
       false ;;
  esac
}

shift "$((OPTIND-1))"
if [ "$#" -eq 0 ]; then
  echo "extract: error: no file paths supplied"
  print_help >&2
  exit 1
fi

index=$(mktemp --suffix='.extract')
trap 'rm $index' EXIT

read_stdin=0
for file in "$@"; do
  if [ "$file" = - ]; then
    [ "$read_stdin" -eq 0 ] &&
      cat >> "$index"
    read_stdin=1
  else
    echo "$file" >> "$index"
  fi
done

exit_code=0
# We read from file descriptor 3 to keep stdin open for prompts from the extracter
# command.
while IFS='' read -r archive_file <&3; do
  if ! [ -r "$archive_file" ]; then
    echo "extract: warn: could not read archive at file='$archive_file'" >&2
    false
  else
    extract_archive "$archive_file" "$output_dir"
  fi ||
    exit_code=1
done 3< "$index"

exit "$exit_code"
