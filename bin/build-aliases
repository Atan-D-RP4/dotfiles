#!/bin/bash
# source [[https://stackoverflow.com/questions/2683279/how-to-detect-if-a-script-is-being-sourced][here]].
if [ -n "$ZSH_EVAL_CONTEXT" ]; then
    case $ZSH_EVAL_CONTEXT in *:file) sourced=1;; esac
elif [ -n "$BASH_VERSION" ]; then
    (return 0 2>/dev/null) && sourced=1
else # All other shells: examine $0 for known shell binary filenames
    # Detects `sh` and `dash`; add additional shell filenames as needed.
    case ${0##*/} in sh|dash) sourced=1;; esac
fi

set -e

inline=0
prettify=0
editor=${EDITOR:-vi}
# generated aliases will be cached here.
cache_dir="$XDG_CACHE_HOME/aliases/"
[ -e "$cache_dir" ] || mkdir -p "$cache_dir"

print_usage() {
    echo 'Usage: eval "$(build_shortcuts.sh [-1] [-i] [-P] [-e EDITOR] FILE [FILE...])"'
    echo ""
    echo "Required Arguments:"
    echo "  FILE       file from which to read alias declarations from"
    echo "             each line should be an alias with the first word"
    echo "             being the alias name and the rest the alias cmd"
    echo ""
    echo "Optional Arguments:"
    echo "  -1         output all aliases in a single line"
    echo "  -p/-P      prettify outputed aliases; this'll probably break"
    echo "  -e EDITOR  set the editor used for file aliases"
}

while getopts "hi1e:PpC" option; do
    case "$option" in
        h) print_usage
           exit 0 ;;
        \?) print_usage >&2
            exit 1 ;;
        1) inline=1
           ;;
        e) editor=$OPTARG
           ;;
        P) prettify=0 # probably the safe bet :)
           ;;
        p) prettify=1
           ;;
    esac
done

shift $(($OPTIND - 1))

read_script() { #(*files)
    cat "$@" | sed -r - -e ':x /\\$/ { N; s/\\\n//g ; bx }' \
                        -e 's/#.*$//'                       \
                        -e '/^\s+/s/^\s+//'                 \
                        -e '/^\s*$/d'

    # join lines ending with a backslash together, then strip comments, entry
    # level indentation, empty lines (in that order) from every input file
    # concatenated together.
    # the line joining program was a godsend from the gnu sed manual:
    #  * https://www.gnu.org/software/sed/manual/html_node/Joining-lines.html
}

parse_aliases() {
    while read -r cut dest; do
        # available tags:
        #  @file create a file shortcut, invoking it opens editor with it.
        #  @dir  create a dir shortcut, invoking it changes dir to it.
        #  @dirx same as @dir, but also creates a q{name} alias which
        #        pushes onto the directory stack.
        case "$cut" in
            *@file) cut=${cut%@file*}
                    echo alias ${cut@Q}=${editor@Q}"' '"${dest@Q}
                    ;;
            *@dir) cut=${cut%@dir*}
                   echo alias ${cut@Q}="'cd '"${dest@Q}
                   ;;
            *@dirx) cut="${cut%@dir*}"
                    echo alias  ${cut@Q}="'cd '"${dest@Q}
                    echo alias q${cut@Q}="'pushd '"${dest@Q}
                    ;;
            *) echo alias ${cut@Q}=${dest@Q}
               ;;
        esac
    done
}

create_aliases() { #(*files)
    for file in "$@"; do
        if ! [ -r "$file" -a -f "$file" ]; then
            echo "build-aliases(error) : shortcut file '$file' is not readable" >&2
            continue
        fi

        # check if generated cache exists and use it instead.
        base=$(basename -- "$file")
        cached="$cache_dir/$base"
        if [ -e "$cached" -a "$cached" -nt "$file" ]; then
            cat -- "$cached"
            continue
        fi

        # generate aliases and then save back to cache
        read_script "$file" | parse_aliases | tee "$cache_dir/$base"
    done | if [ "$prettify" -eq 1 ]; then sed "s/''//g"; else cat; fi
}

_inline_alias_calls() {
    # turn an output stream with rows of alias calls,
    # into one alias calls with multiple alias targets

    cat | sed 's/^alias //' \
        | tr '\n' ' '       \
        | awk -e 'BEGIN { printf "alias " }' \
              -e '{ printf("%s", $0) }' \
              -e 'END { printf "\n" }'
}

main() {
    create_aliases "$@" |
        if [ "$inline" -eq 1 ]; then _inline_alias_calls; else cat; fi
}

if [ "${sourced:-0}" -eq 0 ]; then
    main "$@"
fi
