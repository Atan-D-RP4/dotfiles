#!/usr/bin/env -S gawk -E
# Associate programs with icons using a human readable config, see [[file:~/.config/dotfiles/core/progicons][progicons]]. -*- mode: awk; +indent: 2 -*-

@include "getopt.awk"

function print_usage() {
  print "Usage: prog-icons [-h] [-f] [-l] [-x FORMAT] [-c CONF]"
  print "                  [PROG [PROG...]]"
}

function print_help() {
  print_usage()
  print ""
  print "  Output an icon to associate with the program PROG."
  print ""
  print "Optional arguments:"
  print "  -h         Print this help message and exit"
  print "  -x FORMAT  Format outputted icons with FORMAT"
  print "  -c CONF    Read icon configuration from CONF"
  print "             (defaults to $XDG_CONFIG_HOME/prog-icons)"
  print "  -l         Flush stdout after every print operation"
  print "  -f         Read program names from stdin until EOF"
}

BEGIN {
  line_buffer = 0
  follow = 0
  format = "%s \n"
  fallback = "ï„ "
  while ((opt = getopt(ARGC, ARGV, "hx:c:lf")) != -1) {
    opti++
    if (Optarg)
      opti++
    switch (opt) {
    case "l":
      line_buffer = 1
      break
    case "c":
      conf_file = Optarg
      break
    case "x":
      format=Optarg
      break
    case "f":
      follow = 1
      break
    case "h":
      print_help()
      exit
    case "?":
      print_help();
      exit 1
    }
  }
  ARGC -= opti

  if (!conf_file) {
    conf_home = ENVIRON["XDG_CONFIG_HOME"]
    if (!conf_home)
      conf_home = "~/.config/"
    conf_file = conf_home "/prog-icons"
  }
  ic = 1 # icon_counter
  while ((getline line < conf_file) > 0) {
    if (line ~ /^[[:space:]]*#/ ||
        line ~ /^[[:space:]]*$/)
      continue
    if (match(line, /(.+)[[:space:]]+([^[:space:]]+)$/, mtch)) {
      pattern = substr(line, mtch[1, "start"], mtch[1, "length"])
      sub(/[[:space:]]+$/, "", pattern) # Trim because greedy capture
      icon    = substr(line, mtch[2, "start"], mtch[2, "length"])

      # convert pattern to glob
      gsub("*", ".*", pattern);
      pattern = "^" pattern "$"

      # store back to icons array
      icons[ic, "pattern"] = pattern
      icons[ic, "icon"]    = icon
      ic++
    }
  }
}

function get_icon(prog, i) {
  # check whether this matches the last program and output
  # the previous icon instead.
  if (prog == last_prog && last_icon) {
    return last_icon
  }
  last_prog = prog

  for (i=1; i <= ic; i++) {
    pattern = icons[i, "pattern"]
    icon    = icons[i, "icon"]
    if (prog ~ pattern) {
      last_icon = icon
      return icon
    }
  }

  last_icon = fallback
  return fallback
}

function print_icon(prog) {
  printf(format, get_icon(prog))
  if (line_buffer) {
    fflush(stdout)
  }
}

BEGIN {
  while (i++ < ARGC-1) {
    print_icon(ARGV[opti+i])
  }
  ARGC -= i

  if (!follow) {
    exit(0)
  }
}

{
  print_icon($0)
}
