#!/usr/bin/env bash
# -*- +indent: 2 -*-
#
# A [[https://github.com/junegunn/fzf/blob/246b9f313085fac4c9c84cf8bf55cc8a8fc29482/bin/fzf-tmux][fzf-tmux]] like script designed to support tmux's new [[https://github.com/tmux/tmux/issues/1842][floating window]] feature.
# This script accepts a command line, runs it in a new tmux popup (or window if
# the current tmux version doesn't support popups) and then echoes out the
# commands stdout.
#
# This script is largely just an edit of the existing fzf-tmux script from commit
# 246b9f. A list of changes include:
# - Removal of uniquely fzf targeting logic. This script is generic, use it
#   to create run a command in a tmux popup or the current shell if you're
#   not in tmux.
# - Replacement of [[]] with POSIX shell [] where possible. This is mostly to
#   avoid interference with emacs org-mode links.
# - Various quoting and other issues pointed out by shell check.
# - Removal of the automatic handling of stdin and stdout between this script and
#   the tmux-popup. If you want to pass stdin you must explicitly pass -i and if
#   you want to read the output pass -o.
#
# I'll try to maintain compatibility with the upstream fzf-tmux script, but frankly
# there's a lot about this script I don't understand. Partly because of bashisms and
# partly because it's not very legible.

usage() {
  cat <<-EOF
Usage: tmux-popup [--help] [-p|-s] [-i] [-o] [-b]
                  [-x COL] [-y ROW]
                  [-h HEIGHT[%]] [-w WIDTH[%]]
                  [-u HEIGHT[%]] [-l WIDTH[%]]
                  [-d HEIGHT[%]] [-r WIDTH[%]]
                  [--] SUCOMMAND [OPTS]
EOF
}

help() {
  usage
  cat <<-EOF

Optional Arguments:
  --help             Show this help message and exit
  -i                 Pass standard input to popups stdin
  -o                 Pass popups standard output/error to current out/err
  -p|-s              Toggle use of popup windows (requires tmux >= 3.2)
  -b                 Hide tmux border and enable fzf border if using fzf

Popup Options:
  -w   WIDTH[%]      Set the width of the popup window
  -h   HEIGHT[%]     Set the height of the popup window
  -x   COL           Set the column position of the popup
  -y   ROW           Set the row position of the popup

Split Pane Options:
  -u [HEIGHT[%]]     Split window above (up)
  -d [HEIGHT[%]]     Split window below (down)
  -l [WIDTH[%]]      Split window to the left
  -r [WIDTH[%]]      Split window to the right
EOF
}

fail() {
    >&2 echo "$1"
    exit 2
}

tmux_args=()           # Command line args passed directly to tmux
args=()                # Command line args used in the new popup window
opt=""                 # Command line options passed to the popup command
skip=""                # Stop processing command line arguments
swap=""                # Command to swap two tmux panes
close=""               # Post popup script evaluated after popup has finished
read_in=0              # Whether to pass current standard input to popup
write_out=0            # Whether to write popups stdout and stderr to current stdout/err
tmux_border=1          # Use tmux border instead of the fzf border

[ -n "$LINES"   ] && lines=$LINES     || lines=$(tput lines)  || lines=$(tmux display-message -p "#{pane_height}")
[ -n "$COLUMNS" ] && columns=$COLUMNS || columns=$(tput cols) || columns=$(tmux display-message -p "#{pane_width}")

# Detect whether popup support is available and enable it by default.
tmux_version=$(tmux -V)
[ "$(echo "$tmux_version" | tr -c -d 0-9)" -ge 32 ] && opt="-E"

while [ "$#" -gt 0 ]; do
  arg="$1"; shift
  [ -z "$skip" ] && case "$arg" in
    --help) help
            exit 0 ;;
    # Toggle popup usage
    -p) [[ "$opt" =~ "-E" ]] || opt="-E" ;;
    -s) opt="${opt//-E}" ;;
    # Configure popup environment and handling
    -i) read_in=1 ;;
    -o) write_out=1 ;;
    -b) tmux_border=0 ;;
    # Configure popup/split features.
    -w*|-h*|-x*|-y*|-d*|-u*|-r*|-l*)
      if [[ "$arg" =~ ^-[whxy] ]]; then
        [[ "$opt" =~ "-E" ]] || opt="-E"
      elif [[ "$arg" =~ ^.[lr] ]]; then
        opt="-h"
        if [[ "$arg" =~ ^.l ]]; then
          opt="$opt -d"
          swap="; swap-pane -D ; select-pane -L"
          close="; tmux swap-pane -D"
        fi
      else
        opt=""
        if [[ "$arg" =~ ^.u ]]; then
          opt="$opt -d"
          swap="; swap-pane -D ; select-pane -U"
          close="; tmux swap-pane -D"
        fi
      fi

      if [ "${#arg}" -gt 2 ]; then
        size="${arg:2}"
      else
        if [[ "$1" =~ ^[0-9%,]+$ ]] || [[ "$1" =~ ^[A-Z]$ ]]; then
          size="$1"
          shift
        else
          continue
        fi
      fi

      if [[ "$arg" =~ ^-[whxy] ]]; then
        opt="$opt ${arg:0:2}$size"
      elif [[ "$size" =~ %$ ]]; then
        size=${size:0:((${#size}-1))}
        if [ -n "$swap" ]; then
          opt="$opt -p $(( 100 - size ))"
        else
          opt="$opt -p $size"
        fi
      else
        if [ -n "$swap" ]; then
          if [[ "$arg" =~ ^.l ]]; then
            max=$columns
          else
            max=$lines
          fi
          size=$(( max - size ))
          [ "$size" -lt 0 ] && size=0
          opt="$opt -l $size"
        else
          opt="$opt -l $size"
        fi
      fi
      ;;
    --)
      # "--" can be used to separate this scripts options from subcommand options.
      skip=1
      tmux_args=( "${args[@]}" )
      args=( )
      continue
      ;;
    *) args+=( "$arg" ) ;;
  esac
  [ -n "$skip" ] && args+=( "$arg" )
done

if [ "${#args[@]}" -eq 0 ]; then
  echo "tmux-popup: warn: no command to spawn found, defaulting to sh" >&2
  args=( "${SHELL:-sh}" )
fi

if [ -z "$TMUX" ]; then
  "${args[@]}"
  exit $?
fi

# Handle zoomed tmux pane without popup options by moving it to a temp window
if [[ ! "$opt" =~ "-E" ]] && tmux list-panes -F '#F' | grep -q Z; then
  zoomed_without_popup=1
  original_window=$(tmux display-message -p "#{window_id}")
  tmp_window=$(tmux new-window -d -P -F "#{window_id}" "bash -c '
  while :; do
    for c in \\| / - '\\;' do
      sleep 0.2
      printf \"\\r\$c tmux-popup is running\\r\"
    done
  done
'")
  tmux swap-pane -t "$tmp_window" \; select-window -t "$tmp_window"
fi

set -e

# Setup pipes to read/write to the popup
id=$RANDOM
argsf="${TMPDIR:-/tmp}/tmux-popup-args-$id"  # Will be sourced in the new tmux pane.
fifo1="${TMPDIR:-/tmp}/tmux-popup-fifo1-$id" # stdin
fifo2="${TMPDIR:-/tmp}/tmux-popup-fifo2-$id" # stdout
fifo3="${TMPDIR:-/tmp}/tmux-popup-fifo3-$id" # stores exit code from the split when not using the popup.
# shellcheck disable=SC2207
tmux_win_opts=( $(tmux show-window-options remain-on-exit \; show-window-options synchronize-panes |
                    sed '/ off/d; s/^/set-window-option /; s/$/ \\;/') )

cleanup() {
  \rm -f "$argsf" "$fifo1" "$fifo2" "$fifo3"

  # Restore tmux window options
  if [ "${#tmux_win_opts[@]}" -gt 0 ]; then
    eval "tmux ${tmux_win_opts[*]}"
  fi

  # Remove temp window if we were zoomed without popup options
  if [ -n "$zoomed_without_popup" ]; then
    tmux display-message -p "#{window_id}" > /dev/null
    tmux swap-pane  -t "$original_window" \; \
      select-window -t "$original_window" \; \
      kill-window   -t "$tmp_window" \; \
      resize-pane -Z
  fi

  if [ $# -gt 0 ]; then
    trap - EXIT
    exit 130
  fi
}
trap 'cleanup 1' SIGUSR1
trap 'cleanup' EXIT

# Setup environment for the new popup
envs="export TERM=$TERM "
if [[ "$opt" =~ "-E" ]]; then
  FZF_DEFAULT_OPTS="--margin 0,1 $FZF_DEFAULT_OPTS"
  if [ "$tmux_border" -eq 0 ] && [[ ! $tmux_version =~ 3\.2 ]]; then
    FZF_DEFAULT_OPTS="--border $FZF_DEFAULT_OPTS"
    opt="-B $opt"
  fi
fi
[[ -n "$FZF_DEFAULT_OPTS"    ]] && envs="$envs FZF_DEFAULT_OPTS=$(printf %q "$FZF_DEFAULT_OPTS")"
[[ -n "$FZF_DEFAULT_COMMAND" ]] && envs="$envs FZF_DEFAULT_COMMAND=$(printf %q "$FZF_DEFAULT_COMMAND")"
echo "$envs;" > "$argsf"

opts=$(printf "%q " "${args[@]}")                                               # Quotes command that's to be run in the popup.

pppid=$$
echo -n "trap 'kill -SIGUSR1 -$pppid' EXIT SIGINT SIGTERM;" >> "$argsf"
close="; trap - EXIT SIGINT SIGTERM $close"

export TMUX
TMUX=$(cut -d , -f 1,2 <<< "$TMUX")

show_popup() {
  # Create popup script alongside an optional FIFO to write stdout to.
  if [ "$write_out" -eq 1 ]; then
    mkfifo -m o+w "$fifo2"
    cat "$fifo2" & # Start writing from popups output stream
  fi
  if [ "$read_in" -eq 0 ]; then
    echo -n "$opts" >> "$argsf"
  else
    mkfifo "$fifo1"
    echo -n "$opts < $fifo1" >> "$argsf"
    cat <&0 > "$fifo1" & # Start redirecting standard input to popups input stream.
  fi
  [ "$write_out" -eq 0 ] || echo -n " | tee $fifo2" >> "$argsf"
  cat <<< "; out=\$? $close; exit \$out" >> "$argsf"

  # shellcheck disable=SC2086
  tmux popup -d "$PWD" "${tmux_args[@]}" $opt "bash $argsf" > /dev/null 2>&1
  return $?
}

show_split() {
  [ "$write_out" -eq 0 ] || mkfifo -m o+w "$fifo2"
  mkfifo -m o+w "$fifo3" # For some reason tmux-fzf implemented this as a FIFO

  if [ "$read_in" -eq 0 ]; then
    echo -n "$opts" >> "$argsf"
  else
    mkfifo "$fifo1"
    echo -n "$opts < $fifo1" >> "$argsf"
    cat <&0 > "$fifo1" &
  fi
  [ "$write_out" -eq 0 ] || echo -n " | tee $fifo2" >> "$argsf"
  cat <<< "; echo \$? > $fifo3 $close" >> "$argsf"

  # shellcheck disable=SC2086
  tmux set-window-option synchronize-panes off \;\
       set-window-option remain-on-exit off \;\
       split-window -c "$PWD" $opt "${tmux_args[@]}" "bash $argsf" $swap \
       > /dev/null 2>&1 || { "${args[@]}"; exit $?; }
  [ "$write_out" -eq 0 ] || cat "$fifo2"
  return "$(cat "$fifo3")"
}

if [[ "$opt" =~ "-E" ]]; then
  show_popup
else
  show_split
fi
