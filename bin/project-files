#!/usr/bin/env bash
# Recursively find files in the current project directory.
#
# Uses a host of different programs to find ways to respect ignore
# files (such as .gitignore, .ignore etc.).

read -r -d '' USAGE <<EOF
Usage: project-files [-h] [-d|-f] [-z] [-c|-C] [-a] [-v] [DIR [...DIR]]
EOF

read -r -d '' HELP <<EOF
$USAGE

  Recursively list all the files in a project, respecting any
  ignore configurations using tools that support them. When
  a directory being listed isn't a project this script lists
  all the files in it.

Optional arguments:
  -h      show this help message and exit
  -d/-f   only list directories or files
  -z      output null delimited
  -a      skip project check and list all files
  -u/-U   guarantee the paths are outputted uniquely
  -c/-C   color paths using same format as LS_COLORS
  -v      Don't hide debugging output from listing
EOF

set -e # auto exit on a failed command

dirs_only=0 files_only=0 null=0 find_all=0 color=0 verbose=0
while getopts 'cChdfzav' OPTION; do
    case "$OPTION" in
        h) echo "$HELP"
           exit 0 ;;
        \?) echo "$USAGE" >&2
            exit 1 ;;
        d) dirs_only=1 ;;
        f) files_only=1 ;;
        z) null=1 ;;
        a) find_all=1 ;;
        c) color=1 ;;
        C) color=0 ;;
        v) verbose=1 ;;
    esac
done
shift "$((OPTIND-1))"
if [ -z "$*" ]; then
    dirs=( "./" )
fi
dirs=( "$@" )

[ "$verbose" -eq 0 ] && exec 2>/dev/null

# Gawk arguments to load $dirs into a gawk subprocess.
gawk_pre_dirs=(
    -v paths_str="$(IFS=:; echo "${dirs[*]}")"
    -e 'BEGIN {
  for (i=1; i <= split(paths_str, paths_arr, ":"); i++) {
    gsub("/*$", "", paths_arr[i])
    dirs[paths_arr[i]]++
  }
}'
)

# ┌───────────────────┐
# │ Utility Functions │
# └───────────────────┘

files_to_dir() {
    # Strip out filename components, removing all but the filename.
    #
    # WARN: There's this weird issue were some paths lead xargs to give out
    #       two lines, one ending with a / and the other beginning with a .
    #       For now I'm just stripping both these out, but I should probably
    #       come up with a better solution.
    xargs -d '\n' -r dirname |
        awk "${gawk_pre_dirs[@]}" \
            -e '!($0 == "." || $0 ~ /^\/$/ || dirs[$0]++)'
}

files_to_files_and_dir() {
    # For each file in STDIN, read the directory component and echo
    # it out seperately. Each directory is only outputted once such
    # that repeated files in the same directory don't cause non-unique
    # directory outputs.
    awk "${gawk_pre_dirs[@]}" \
        -e '
{
  if (match($0, /(.+)\/[^\/]+$/, group)) {
    dir = group[1]
    # If not cwd and not seen before.
    if (dir != "." && !dirs[dir]++) {
      print dir "/"
    }
  }

  print $0
}'
}

# ┌─────────┐
# │ Filters │
# └─────────┘
#
# Filters accept file paths from stdin and transform them depending
# on the environment of the current script.

file_filter() {
    # Given a stream of file paths, this filter either filters out the
    # basename component or zips together directories and files in the
    # output.
    if [ "$dirs_only" -eq 1 ]; then
        files_to_dir
    elif [ "$files_only" -eq 1 ]; then
        cat
    else
        files_to_files_and_dir
    fi
}

null_filter() {
    if [ "$null" -eq 1 ]; then
        tr '\n' '\0'
    else
        cat
    fi
}

color_filter() {
    if [ "$color" -eq 0 ]; then
        cat # no color, output as is :-(
    elif hash parallel; then
        parallel --line-buffered -X ls -qd --quoting-style=literal --color {}
    else
        xargs -r -d '\n' ls -qd --quoting-style=literal --color --
    fi
}

# ┌──────────┐
# │ Handlers │
# └──────────┘

do_rg() {
    rg --files --hidden --follow -- "${dirs[@]}" |
        file_filter |
        null_filter
}

do_git() {
    git ls-files -- "${dirs[@]}" |
        file_filter |
        null_filter
}

do_fd() {
    flags=( )
    if [ "$dirs_only" -eq 1 ]; then
        flags+=( --type d )
    elif [ "$files_only" -eq 1 ]; then
        flags+=( --type f )
    fi

    [ "$null" -eq 1 ] && flags+=( --print0 )
    fd --follow -H --color never "${flags[@]}" . -- "${dirs[@]}"
}

do_find() {
    flags=( )
    if [ "$dirs_only" -eq 1 ]; then
        flags+=( -type d )
    elif [ "$files_only" -eq 1 ]; then
        flags+=( -type f )
    fi

    [ "$null" -eq 1 ] && flags+=( -print0 )
    find -L "${dirs[@]}" -mindepth 1 "${flags[@]}"
}

# ┌─────────────┐
# │ Switchboard │
# └─────────────┘
#
# Run through available programs and invoke the first handler you find.

if [ "$find_all" -eq 1 ]; then
    do_find
elif hash rg; then
    do_rg
elif [ -d .git ] || git git rev-parse --git-dir; then
    do_git
elif hash fd; then
    do_fd
else
    do_find
fi |
    color_filter
