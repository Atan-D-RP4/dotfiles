#!/usr/bin/env python3
"""Status misc segment for showing MullvadVPN connection status."""
# pylint: disable=no-member

import logging
import re
from distutils.spawn import find_executable as which
from typing import Callable, Optional

from lib.shared import run_process
from lib.status_misc.segment import StatusMiscSegment


class MullvadVPNSegment(StatusMiscSegment):
    """Status line segment showing MullvadVPN status."""

    name = "mullvad-vpn"

    # Number of times checking the mullvad vpn status has to fail before we
    # clear the status.
    #
    # The `mvpn -l` command has a tendency to fail sporadically with no real
    # explanation. Rather than clearing the status (despite still being
    # connected), now it is only cleared once the command fails this many
    # times in succession.
    FAIL_COUNT = 5

    # Counter variable for FAIL_COUNT.
    _fail_counter: int = 0

    # Value of the segment from the previous run. Persisted for use by
    # FAIL_COUNT.
    _segment_value: Optional[str] = None

    @classmethod
    def parser_args(
        cls, parser: "argparse.ArgumentParser", flag: Callable[[str], str]
    ) -> None:
        mvpn_group = parser.add_argument_group("Mullvad VPN")
        super().parser_args(mvpn_group, flag)

        mvpn_group.add_argument(
            flag("icon"),
            default="N",
            metavar="ICON",
            help="Icon shown to indicate mullvad-vpn status.",
        )
        mvpn_group.add_argument(
            flag("hide"),
            action="store_true",
            help="Hide mullvad-vpn status when disconnected",
        )
        mvpn_group.add_argument(
            flag("active-style"),
            default="",
            metavar="STYLE",
            help="Styling for an active mullvad-vpn connection.",
        )
        mvpn_group.add_argument(
            flag("inactive-style"),
            default="",
            metavar="STYLE",
            help="Styling for an inactive mullvad-vpn connection.",
        )

    # pylint: disable=invalid-overridden-method
    async def render(self):
        """MullvadVPN status-line section."""
        if not which("mullvad"):
            logging.debug(
                "Skipping segment=%s because mullvad is not installed.", self.name
            )
            return None
        returncode, stdout, _stderr = await run_process(
            ["mullvad", "status", "--location"], encoding="utf-8"
        )
        if returncode != 0:
            logging.warning(
                "Warning failed to run mullvad process for segment=%s", self.name
            )
            if self._fail_counter >= self.FAIL_COUNT - 1:
                logging.debug(
                    "Failure buffer count=%d exceeded continuous attempts=%d",
                    self.FAIL_COUNT,
                    self._fail_counter,
                )
                return None
            self._fail_counter = self._fail_counter + 1
            logging.debug("Mulvad process failed count=%d times", self._fail_counter)
            return self._segment_value
        self._fail_counter = 0
        ip_address = ""
        match = re.search(
            r"Connected to (?:.*\n)IPv4: (.+)$",
            stdout,
            flags=re.IGNORECASE | re.MULTILINE,
        )
        if not match:
            if self.hide:
                return None
        elif match:
            ip_address = " " + match[1]
        self._segment_value = (
            self._style(
                self.icon, self.active_style if ip_address else self.inactive_style
            )
            + ip_address
        )
        return self._segment_value


if __name__ == "__main__":
    MullvadVPNSegment.main()
