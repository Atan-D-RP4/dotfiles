#!/usr/bin/env python3-dotfiles-venv
"""Status misc segment for showing MullvadVPN connection status."""
# pylint: disable=no-member

import logging
import re
import shutil
from typing import Callable

from lib.shared import run_process
from lib.status_misc.segment import StatusMiscSegment


class MullvadVPNSegment(StatusMiscSegment):
    """Status line segment showing MullvadVPN status."""

    name = "mullvad-vpn"

    @classmethod
    def parser_args(
        cls, parser: "argparse.ArgumentParser", flag: Callable[[str], str]
    ) -> None:
        mvpn_group = parser.add_argument_group("Mullvad VPN")
        super().parser_args(mvpn_group, flag)

        mvpn_group.add_argument(
            flag("icon"),
            default="N",
            metavar="ICON",
            help="Icon shown to indicate mullvad-vpn status.",
        )
        mvpn_group.add_argument(
            flag("hide"),
            action="store_true",
            help="Hide mullvad-vpn status when disconnected",
        )
        mvpn_group.add_argument(
            flag("active-style"),
            default="",
            metavar="STYLE",
            help="Styling for an active mullvad-vpn connection.",
        )
        mvpn_group.add_argument(
            flag("inactive-style"),
            default="",
            metavar="STYLE",
            help="Styling for an inactive mullvad-vpn connection.",
        )

        # Determining the IP address can fail without warning, and is noticeably
        # slower than just checking whether we're connected or not. These flags
        # give us the option to skip location resolution or ignore its failure.
        ip_resolve_group = mvpn_group.add_mutually_exclusive_group()
        ip_resolve_group.add_argument(
            flag("skip-ip"),
            action="store_true",
            help="Do not attempt to determine the IP address for the mullvad session.",
        )
        ip_resolve_group.add_argument(
            flag("ignore-missing-ip"),
            action="store_true",
            help="Ignore failures when determining the mullvad session ip address.",
        )

    # pylint: disable=invalid-overridden-method
    async def render(self):
        """MullvadVPN status-line section."""
        if not shutil.which("mullvad"):
            logging.debug(
                "Skipping segment=%s because mullvad is not installed.", self.name
            )
            return None
        command = ["mullvad", "status"]
        if not self.skip_ip:
            command.append("--location")
        returncode, stdout, _stderr = await run_process(command, encoding="utf-8")
        if returncode != 0 and not stdout:
            logging.warning(
                "Warning failed to run mullvad process for segment=%s", self.name
            )
            return None
        ip_address = ""
        match = re.search(
            r"Connected to (?:.*)(?:\nIPv4: (.+))?$",
            stdout,
            flags=re.IGNORECASE | re.MULTILINE,
        )

        connected = True
        if not match:
            if self.hide:
                return None
            connected = False
        elif match[1]:
            logging.debug("mullvad-vpn ip-address=%s", match[1])
            ip_address = " " + match[1]
        elif self.ignore_missing_ip:
            logging.debug(
                "Skipping ip-address in result because ignore-missing-ip=%s",
                self.ignore_missing_ip,
            )
        elif not self.skip_ip:
            return None
        return (
            self._style(
                self.icon, self.active_style if connected else self.inactive_style
            )
            + ip_address
        )


if __name__ == "__main__":
    MullvadVPNSegment.main()
