#!/usr/bin/env bash
# -*- +indent: 2 -*- System launcher adapted from [[https://github.com/Biont/sway-launcher-desktop/blob/master/sway-launcher-desktop.sh][sway-launcher-desktop]].

set -o pipefail

if ! { exec 0>&3; } 1>/dev/null 2>&1; then
  exec 3>/dev/null # If file descriptor 3 is unused in parent shell, output to /dev/null
fi

TERMINAL_COMMAND="${TERMINAL_COMMAND:-${TERMINAL:-TERM} -e}"
GLYPH_PROMPT="${GLYPH_PROMPT:-# }"

sep=$(printf "\034")

GLYPH_COMMAND="${GLYPH_COMMAND-  }"
COLOR_COMMAND="\033[31m"
function list-commands() {
  IFS=: read -ra path <<<"$PATH"
  find -L "${path[@]}" \
       -maxdepth 1 -mindepth 1 -type f -executable \
       -printf "%p${sep}command${sep}$COLOR_COMMAND$GLYPH_COMMAND %f\033[0m\n" 2>/dev/null |
    sort -u
}

function describe-command() {
  readarray arr < <(whatis -l "$1" 2>/dev/null)
  description="${arr[0]}"
  description="${description#* - }"
  echo -e "\033[33m${1}\033[0m"
  echo "${description:-No description}"
}

GLYPH_DESKTOP="${GLYPH_DESKTOP-  }"
COLOR_DESKTOP="\033[33m"
function list-entries() {
  # Get locations of desktop application folders according to [[https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html][spec]].
  IFS=':' read -ra dirs <<< "\
${XDG_DATA_HOME-${HOME}/.local/share}:\
${XDG_DATA_DIRS-/usr/local/share:/usr/share}"
  for i in "${!dirs[@]}"; do
    dirs[$i]="${dirs[$i]}/applications"
  done

  # Awk script adapted from [[https://github.com/Biont/sway-launcher-desktop/blob/master/sway-launcher-desktop.sh#L106][sway-launcher-desktop]].
  find "${dirs[@]}" -type f -iname '*.desktop' \
       -exec gawk -v pre="$GLYPH_DESKTOP" -v sep="$sep" -v color="$COLOR_DESKTOP" -F= '
  function desktopFileID(filename) {
    sub("^.*applications/", "", filename);
    sub("/", "-", filename);
    return filename
  }

  BEGINFILE {
    application=0;
    hidden=0;
    block="";
    a=0

    id = desktopFileID(FILENAME)
    if (id in fileIds) {
      nextfile;
    } else {
      fileIds[id] = 0
    }
  }

  /^\[Desktop Entry\]/ { block = "entry" }
  /^Type=Application/{ application = 1 }
  /^\[Desktop Action/ {
    sub("^\\[Desktop Action ", "");
    sub("\\]$", "");
    block = "action";
    a++;
    actions[a, "key"] = $0
  }

  /^\[X-/ {
    sub("^\\[X-", "");
    sub("\\]$", "");
    block = "action";
    a++;
    actions[a, "key"] = $0
  }

  /^Name=/ { (block == "action") ? actions[a,"name"]=$2 : name=$2 }
  /^NoDisplay=true/ { (block == "action") ? actions[a, "hidden"]=1 : hidden=1 }
  ENDFILE {
    if (application) {
        if (!hidden)
            print FILENAME sep "desktop" sep color pre name "\033[0m";

        if (a>0)
            for (i=1; i<=a; i++)
                if (!actions[i, "hidden"])
                    print FILENAME sep "desktop" sep color pre name "\033[0m (" actions[i, "name"] ")" sep actions[i, "key"]
    }
  }
' {} + </dev/null 2>/dev/null
}

function describe-desktop() {
  description=$(sed -ne '/^Comment=/{s/^Comment=//;p;q}' "$1")
  echo -e "$COLOR_DESKTOP$(sed -ne '/^Name=/{s/^Name=//;p;q}' "$1")\033[0m"
  echo "${description:-No description}"
}

function generate-command() {
  # Define the search pattern that specifies the block to search for within the .desktop file
  PATTERN="^\\\\[Desktop Entry\\\\]"
  if [[ -n $2 ]]; then
    PATTERN="^\\\\[Desktop Action ${2}\\\\]"
  fi
  # echo "Searching for pattern: ${PATTERN}" >&3
  # 1. We see a line starting [Desktop, but we're already searching: deactivate search again
  # 2. We see the specified pattern: start search
  # 3. We see an Exec= line during search: remove field codes and set variable
  # 3. We see a Path= line during search: set variable
  # 4. Finally, build command line
  awk -v pattern="${PATTERN}" \
      -v terminal_cmd="${TERMINAL_COMMAND}" \
      -F= '
  BEGIN{ a=0; exec=0; path=0 }

  /^\[Desktop/ {
    if(a) { a=0 }
  }

  $0 ~ pattern { a=1 }
  /^Terminal=/ {
    sub("^Terminal=", "");
    if ($0 == "true") { terminal=1 }
  }

  /^Exec=/ {
    if (a && !exec) {
      sub("^Exec=", "");
      gsub(" ?%[cDdFfikmNnUuv]", "");
      exec=$0;
    }
  }

  /^Path=/ {
    if (a && !path) { path=$2 }
  }

  END {
    if (path) { printf "cd " path " && " }
    if (terminal) { printf terminal_cmd " " }
    print exec
  }' "$1"
}

if [ "$#" -gt 0 ]; then
  case "$1" in
    describe-desktop|describe-command|list-entries|list-commands|generate-command)
      "$@"
      exit $? ;;
    help)
      echo "launch {describe-desktop,describe-command,list-entries,list-commands} [ARGS]"
      exit 0
      ;;
    *)
      echo "launch: error: unknown command $1: run 'help' for a list of supported commands." >&3
      exit 1 ;;
  esac
fi

IFS="$sep" read -r desc type _ rest <<< "$(
  {
    list-entries
    list-commands
  } |
    fzf \
      --ansi --no-sort --extended --delimiter "$sep" --nth ..3 --with-nth 3 \
      --preview "$0 describe-{2} {1}" \
      --preview-window=down:2 \
      --no-multi --cycle \
      --prompt="$GLYPH_PROMPT" \
      --reverse --no-info \
      --color='16,gutter:-1' \
      --history "${XDG_STATE_HOME:-$HOME/.local/state}"/fzf/history/launch)"

case "$type" in
  desktop)
    cmd=$(generate-command "$desc" "$rest")
    ;;
  command)
    cmd=$desc
    ;;
  *) echo "launch: error: unknown type: $type" >&3
     ;;
esac

if [ -t 1 ]; then
  echo "Launching command: ${COMMAND}" >&3
  setsid /bin/sh -c "$cmd" >&/dev/null </dev/null &
  sleep 0.01
else
  echo "${COMMAND}"
fi
