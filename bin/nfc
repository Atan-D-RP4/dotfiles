#!/usr/bin/env python3
import os
import re
import logging
import shutil
import pathlib

def gen_nums(range_it, title, index, dtlen):
    digits = list(re.finditer(r'\d+', str(title)))
    if not(digits):
        raise ValueError('Title has no numbers: %s' % title)

    try:
        digit = digits[index]
    except IndexError:
        raise Exception("Title doesn't have number at index: %s" % args.title_index)

    if not dtlen:
        dtlen = len(digit.group())

    start, end = digit.span()
    for i in range_it:
        yield title[:start] + str(i).rjust(dtlen, '0') + title[end:]

if __name__ == '__main__':
    import argparse

    def parse_args():
        parser = argparse.ArgumentParser()

        parser.add_argument('template',
                            metavar='TEMPLATE', type=pathlib.Path,
                            help='Path to file/folder that will be cloned')
        parser.add_argument('seq',
                            type=int, metavar='NUM', nargs='+',
                            help='Number range to generate folders from')

        # output_group = parser.add_argument_group('Output')
        parser.add_argument('-o', '--output',
                            metavar='DIR', type=pathlib.Path,
                            default=pathlib.Path('.').resolve(),
                            help='Output copied folders to DIR')

        format_group = parser.add_argument_group('Format')
        format_group.add_argument('-t', '--title',
                                  help='Use TITLE as templates name when copying TEMPLATE')
        format_group.add_argument('-c', '--title-num',
                                  type=int, metavar='NUM', default=-1,
                                  help='Index of number in TITLE (0-terminated) from which to start incrementing.')
        format_group.add_argument('-d', '--digitise',
                                  type=int, metavar='NUM',
                                  help='Override the 0-padding in TITLE.')

        args  = parser.parse_args()
        vargs = vars(args)

        if not args.template.exists():
            parser.error('Template folder not found: %s' % args.template)

        if len(args.seq) > 3:
            parser.error('Format of seq must be [MIN, [MAX, INC]]')
        if len(args.seq) == 1:
            args.seq = [1, args.seq[0]]
        args.seq[1] += 1  # include max
        args.seq = range(*args.seq)

        if not args.title:
            args.title = args.template.name

        return args, vargs, parser

    args, vargs, parser = parse_args()

    copy = shutil.copytree if args.template.is_dir else shutil.copy

    logging.info('Creating output directory: %s', args.output)
    args.output.mkdir(parents=True, exist_ok=True)
    for f in gen_nums(args.seq, args.title, args.title_num, args.digitise):
        dest = args.template.parent / f
        if dest.exists():
            logging.warning('Skipping destination because it exists: %s', dest)
            continue
        logging.info('Copying template to: %d', dest)
        print(dest)
        copy(str(args.template), str(dest))
