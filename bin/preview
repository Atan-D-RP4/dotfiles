#!/usr/bin/env bash
# Usage: preview [path] [height] [width] [x] [y]
# Script to preview files/dirs in your terminal. Original source [[https://github.com/gokcehan/lf/wiki/Ranger][here]].

set -C -f -u -o pipefail
IFS=$'\n'

# Supress debug output (especially when piping to a PAGER).
[ -z "${DEBUG:-}" ] && exec 2>/dev/null

# ANSI color codes are supported.
# STDIN is disabled, so interactive scripts won't work properly

# Script arguments
FILE_PATH="$1"
X="${4:-0}"
Y="${5:-0}"
# NOTE: you can echo -e 'colors\ncols\nlines\n' | tput -S
COLS="${3:-$(tput cols  || echo -n 100)}"
ROWS="${2:-$(tput lines || echo -n 100)}"
TRUE_COLOR="$([ "$(tput colors)" -ge 256 ] && echo -n 1 || echo -n 0)"

FILE_EXTENSION="${FILE_PATH##*.}"
FILE_EXTENSION_LOWER=$(tr '[:upper:]' '[:lower:]' <<< "$FILE_EXTENSION")

# Settings
HIGHLIGHT_SIZE_MAX=262143  # 256KiB                                             # Don't try to highlight files larger than this many bytes
HIGHLIGHT_TABWIDTH=4                                                            # Set the width of tabs when syntax highlighting a file
HTML_IS_PLAINTEXT=1                                                             # When 1 don't try to convert html to plaintext (eg. md)
INCLUDE_DIR="${INCLUDE_DIR:-0}"                                                 # When 1, include the directory path when previewing directories

# early cancel switch when previewing directories. this isn't done
# by ranger/lf, but my fzf scripts might use this script for previews.
if [ -d "$FILE_PATH" ]; then
    if [ "$INCLUDE_DIR" -eq 1 ]; then
        ls -d --color=always "$FILE_PATH"
        echo "${FILE_PATH//?/-}"
    fi
    list=$(ls "$FILE_PATH" --color=always --group-directories-first -1)
    if [ -n "$list" ]; then echo "$list"; else echo -e "\e[7mEmpty\e[27m"; fi
    exit 0
fi

# Syntax highlighters
highlight_bat() {
    bat -p --color always --paging never --tabs "$HIGHLIGHT_TABWIDTH" \
        --theme 'an-old-hope' "$@"
}

highlight_pygmentize() {
    local format='terminal'
    [ "$TRUE_COLOR" -eq 1 ] && format='terminal256'
    pygmentize -f "$format" -O "style=autumn" "$@"
}

highlight_highlight() {
    local format='ansi'
    [ "$TRUE_COLOR" -eq 1 ] && format='xterm256'
    highlight --replace-tabs="$HIGHLIGHT_TABWIDTH" --out-format="$format" \
              --style="pablo" --force "$@"
}

# Previewers
do_archive() {
    if [ "$#" -gt 1 ]; then
        atool  --list --format "$2" -- "$1"
    else
        atool  --list -- "$1"
    fi && exit
    bsdtar --list --file "$1" && exit
}

# Avoid password prompt by providing empty password
do_rar() { unrar lt -p- -- "$1" && exit; }
# Avoid password prompt by providing empty password
do_7z() { 7z l -p -- "$1" && exit; }

do_pdf() {
    # Preview as text conversion
    pdftotext -l 10 -nopgbrk -q -- "$1" - | fmt -w "$COLS" && exit
    mutool draw -F txt -i -- "$1" 1-10    | fmt -w "$COLS" && exit
    exiftool "$1"                                          && exit
}

do_torrent() {
    transmission-show -- "$1" && exit
}

# open documents
do_opendoc() {
    ## Preview as text conversion
    odt2txt "$1" && exit
    ## Preview as markdown conversion
    pandoc -s -t markdown -- "$1" && exit
}

do_xlsx() {
    # Preview as csv conversion using [[https://github.com/dilshod/xlsx2csv][xlsx2csv]].
    xlsx2csv -- "$1" && exit
}

do_json() {
    jq --color-output . -- "$1" && exit
    python -m json.tool -- "$1" && exit
    highlight_bat -l json -- "$1"
}

do_html() {
    if [ "$HTML_IS_PLAINTEXT" -eq 1 ]; then
        do_text "$1"
    else
        w3m -dump "$1"     && exit
        lynx -dump -- "$1" && exit
        elinks -dump "$1"  && exit
        pandoc -s -f html -t markdown -- "$1" |
            if   command -v bat        >/dev/null 2>&1; then highlight_bat -l md - "$@"
            elif command -v highlight  >/dev/null 2>&1; then highlight_highlight --src-lang markdown "$@"
            elif command -v pygmentize >/dev/null 2>&1; then highlight_pygmentize -l md "$@"
            else cat "$@"; fi && exit
    fi
}

## Direct Stream Digital/Transfer (DSDIFF) and wavpack aren't detected
## by file(1).
do_DSDIFF() {
    mediainfo "$1" && exit
    exiftool  "$1" && exit
}

# Preview as text conversion
[ -n "${KITTY:-}" ] && kitty +kitten icat --clear --transfer-mode file --silent
do_img() {
    if [ -n "${KITTY:-}" ]; then
        local dest="${COLS}x${ROWS}@${X}x${Y}"
        kitty +kitten icat --transfer-mode file --silent --place "$dest" "$1" && exit
    fi
    # viu -- "$FILE_PATH" && exit
    # img2txt --gamma=0.6 -- "$FILE_PATH" && exit
    exiftool "$1" && exit
}

do_text() {
    # Skip highlighting when the file is way too large
    [ "$FILESIZE" -gt "$HIGHLIGHT_SIZE_MAX" ] && cat "$1" && exit

    highlight_bat -- "$1" && exit
    highlight_highlight -- "$1" && exit
    highlight_pygmentize -- "$1" && exit
    cat "$1" && exit
}

do_epub() {
    pandoc -f epub -t plain "$1" && exit
    einfo -p "$1" && exit
}

do_video() {
    if mediainfo "$1" && exiftool  "$1"; then exit; fi
}

do_sqlite3() {
    sqlite3 "$1" '.dump' | highlight_bat -l sql && exit 0
}

handle_extension() {
    case "$FILE_EXTENSION_LOWER" in
        a|ace|alz|arc|arj|bz|bz2|cab|cpio|deb|gz|jar|lha|lz|lzh|lzma|lzo|\
        rpm|rz|t7z|tar|tbz|tbz2|tgz|tlz|txz|tZ|tzo|war|xpi|xz|Z|zip)
            do_archive "$FILE_PATH"
            exit 0 ;;
        # Many archive programs don't seem to recognise these extensions.
        cbz)        do_archive "$FILE_PATH" zip; exit 0 ;;
        cbt)        do_archive "$FILE_PATH" tar; exit 0 ;;
        cba)        do_archive "$FILE_PATH" ace; exit 0 ;;
        rar|cbr)    do_rar     "$FILE_PATH";     exit 0 ;;
        cb7|c7z|7z) do_7z      "$FILE_PATH";     exit 0 ;;

        pdf)             do_pdf     "$FILE_PATH"; exit 0 ;;
        torrent)         do_torrent "$FILE_PATH"; exit 0 ;;
        odt|ods|odp|sxw) do_opendoc "$FILE_PATH"; exit 0 ;;
        xlsx)            do_xlsx    "$FILE_PATH"; exit 0 ;;
        epub)            do_epub    "$FILE_PATH"; exit 0 ;;
        htm|html|xhtml)  do_html    "$FILE_PATH"; exit 0 ;;
        json|ipynb*)     do_json    "$FILE_PATH"; exit 0 ;;
        dff|dsf|wv|wvc)  do_DSDIFF  "$FILE_PATH"; exit 0 ;;
        sqlite|sqlite3)  do_sqlite3 "$FILE_PATH"; exit 0 ;;
    esac
}

handle_mime() {
    case "$MIMETYPE" in
        # Mime file types
        */json) do_json "$FILE_PATH"; exit 0 ;;
        */html) do_html "$FILE_PATH"; exit 0 ;;

        # Generic classifications
        video/*|audio/*|application/octet-stream)
            do_video "$FILE_PATH"
            exit 0 ;;
        image/*)      do_img  "$FILE_PATH"; exit 0 ;;
        text/*|*/xml) do_text "$FILE_PATH"; exit 0 ;;
        *sqlite3)     do_sqlite3 "$FILE_PATH"; exit 0 ;;
    esac
}

handle_fallback() {
    echo '----- File Type Classification -----'
    file --dereference --brief -- "$FILE_PATH"
    exit 1
}

MIMETYPE=$(file --dereference --brief --mime-type -- "$FILE_PATH")
FILESIZE=$(stat --printf='%s' -- "$FILE_PATH" || echo -n 0)

handle_extension
handle_mime
handle_fallback

exit 1
