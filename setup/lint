#!/usr/bin/env bash
# Recursively find all executable scripts and match their interpreters
# to different linters and produce GCC compatible linting output.

set -e

print_usage() {
    echo "Usage: $(basename "$0") [-h] [-v] [-d] PATH"
}
print_help() {
  print_usage
  cat <<-EOF

Optional Arguments:
  -h    Show this help message and exit
  -v    Include debugging output for unmatched mimetypes.
  -d    Don't run linters, just output the cmd lines that
        would be run.
EOF
}

root="$DOTFILES" verbose=0 dry_run=0
while getopts 'hvd' OPTION; do
  case "$OPTION" in
    \?) print_usage >&2
        exit 1 ;;
    h) print_usage
       exit 0 ;;
    v) verbose=1 ;;
    d) dry_run=1 ;;
  esac
done
shift $((OPTIND - 1))

[ -n "$*" ] && root="$*"
if [ -z "$root" ]; then
  echo "lint: error: no dotfile repository root directory found" >&2
  exit 1
elif ! [ -e "$root" -a -r "$root" ]; then
  echo "lint: error: dotfile repository root not found: $root" >&2
  exit 1
fi

if command -v parallel >/dev/null 2>&1; then
    batch_str="parallel -d '\n' -X -I% --line-buffer --quote"
    [ "$dry_run" -eq 1 ] && batch_str="$batch_str --dry-run"
else
    batch_str="xargs -d '\n' -I%"
    [ "$dry_run" -eq 1 ] && batch_str="$batch_str echo"
fi


cd "$root"
./bin/find-project -fu |
  xargs -r -d '\n' file --dereference --mime-type -- |
  awk -F ': *' \
      -v shell_lint="$batch_str shellcheck -f gcc %" \
      -v python_lint="$batch_str pylint --msg-template='{path}:{line}:{column}: {category}: {msg} [{msg_id}({symbol})]' --disable C0103,R0801 --rcfile prog/langs/python/pylintrc --reports n --score n %" \
      -v ruby_lint="$batch_str rubocop -f emacs %" \
      -v json_lint="$batch_str jsonlint --quiet %" \
      -v verbose="$verbose" \
      -e '{
  switch ($2) {
  case /x-sh(ellscript)?/:
    print $1 | shell_lint
    break
  case /x-.*python/:
    print $1 | python_lint
    break
  case /x-ruby$/:
    print $1 | ruby_lint
    break
  case /json$/:
    print $1 | json_lint
    break
  default:
    if (verbose)
      print("lint: error: unknown interpreter for linting (" $2 ") at path: " $1)
  }
}'
