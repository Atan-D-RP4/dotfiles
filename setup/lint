#!/usr/bin/env bash
# Recursively find all executable scripts and match their interpreters
# to different linters and produce GCC compatible linting output.

set -e

print_usage() { echo "Usage: $(basename "$0") [-h] PATH"; }
print_help() {
  print_usage
  echo ""
  echo "Optional Arguments:"
  echo "  -h    Show this help message and exit"
}

root="$DOTFILES"
while getopts 'h' OPTION; do
  case "$OPTION" in
    \?) print_usage >&2
        exit 1 ;;
    h) print_usage
       exit 0 ;;
  esac
done
shift $((OPTIND - 1))

[ -n "$*" ] && root="$*"
if [ -z "$root" ]; then
  echo "lint: error: no dotfile repository root directory found" >&2
  exit 1
elif ! [ -e "$root" -a -r "$root" ]; then
  echo "lint: error: dotfile repository root not found: $root" >&2
  exit 1
fi

batch=(  )
if command -v parallel >/dev/null 2>&1; then
  batch+=( parallel -d '\n' -X -I% --line-buffer --quote )
  batch_str="parallel -d '\n' -X -I% --line-buffer --quote"
else
  batch+=( xargs -d '\n' -I% )
  batch_str="xargs -d '\n' -I%"
fi

cd "$root"
files=$(./bin/ls-project -fu |
  "${batch[@]}" find % -executable |
  "${batch[@]}" file --dereference --mime-type -- % |
  awk -F : '$2 ~ /text/' |
  cut -d : -f 1)

# WARN: Assumes each file contains at least 1 line of content.
paste -d: \
  <(echo "$files") \
  <(xargs -r -d '\n' head -n1 -q <<< "$files") |
  sed -e '/:#!/!d' \
      -e 's_:#!/usr/bin/env *\([^ ]\+\)_:\1_' \
      -e 's_:#!.*/\([^/ ]\+\)_:\1_' |
  awk -F : \
      -v shell_lint="$batch_str shellcheck -f gcc %" \
      -v python_lint="$batch_str pylint --msg-template='{path}:{line}:{column}: {category}: {msg} [{msg_id}({symbol})]' -r n -s n %" \
      -v ruby_lint="$batch_str rubocop -f emacs %" \
      -e '{
  switch ($2) {
  case /^(bash|zsh|sh)$/:
    print $1 | shell_lint
    break
  case /^(py$|python)/:
    print $1 | python_lint
    break
  case /^ruby$/:
    print $1 | ruby_lint
    break
  case /^perl$/: break
  default:
    print("lint: error: unknown interpreter for linting (" $2 ") at path: " $1)
  }
}'
