#!/usr/bin/env bash
# Recursively find all executable scripts and match their interpreters
# to different linters and produce GCC compatible linting output.

set -e

print_usage() {
    echo "Usage: $(basename "$0") [-h] [-v] [-d] PATH"
}
print_help() {
  print_usage
  cat <<-EOF

Optional Arguments:
  -h    Show this help message and exit
  -v    Include debugging output for unmatched mimetypes.
  -d    Don't run linters, just output the cmd lines that
        would be run.
EOF
}

root="$DOTFILES" verbose=0 dry_run=0
while getopts 'hvd' OPTION; do
  case "$OPTION" in
    \?) print_usage >&2
        exit 1 ;;
    h) print_usage
       exit 0 ;;
    v) verbose=1 ;;
    d) dry_run=1 ;;
  esac
done
shift $((OPTIND - 1))

[ -n "$*" ] && root="$*"
if [ -z "$root" ]; then
  echo "lint: error: no dotfile repository root directory found" >&2
  exit 1
elif ! [ -e "$root" -a -r "$root" ]; then
  echo "lint: error: dotfile repository root not found: $root" >&2
  exit 1
fi

if command -v parallel >/dev/null 2>&1; then
    batch_str="parallel -d '\n' -X --line-buffer --quote --max-procs 1"
    [ "$dry_run" -eq 1 ] && batch_str="$batch_str --dry-run"
else
    batch_str="xargs -d '\n'"
    [ "$dry_run" -eq 1 ] && batch_str="$batch_str echo"
fi

cd "$root"
ignore=$(tr '\n' : < ./setup/conf/lint.ignore)
./bin/find-project -fu |
  while read -r f; do
    # See [[https://stackoverflow.com/a/61545396/6247387][here]]
    if ! [[ "$ignore" =~ ^$f:|:$f:|:$f$ ]]; then
      echo "$f"
    fi
  done |
  xargs -r -d '\n' file --dereference --mime-type -- |
  awk -F ': *' \
      -v shell_lint="
if command -v shellcheck >/dev/null 2>&1; then
  $batch_str shellcheck -f gcc
else
  echo 'warn: lint: no linter for shell installed' >&2
  cat >/dev/null
fi" \
      -v python_lint="
if command -v pylint >/dev/null 2>&1; then
  $batch_str pylint --rcfile setup/conf/pylintrc --msg-template='{path}:{line}:{column}: {category}: {msg} [{symbol} {msg_id}]' --disable C0103,R0801 --reports n --score n
elif command -v pycodestyle >/dev/null 2>&1; then
  $batch_str pycodestyle --config setup/conf/pycodestyle --format '%(path)s:%(row)d:%(col)d: %(text)s [%(code)s]'
else
  echo 'warn: lint: no linter for python installed' >&2
  cat >/dev/null
fi" \
      -v ruby_lint="
if command -v rubocop >/dev/null 2>&1; then
  $batch_str rubocop -f emacs --config setup/conf/rubocoprc
else
  echo 'warn: lint: no linter for ruby installed' >&2
  cat >/dev/null
fi" \
      -v json_lint="
if command -v jsonlint >/dev/null 2>&1; then
  $batch_str jsonlint --quiet
else
  echo 'warn: lint: no linter for json installed' >&2
  cat >/dev/null
fi" \
      -v yaml_lint="
if command -v yamllint >/dev/null 2>&1; then
  $batch_str yamllint -f parsable -c setup/conf/yamlrc
else
  echo 'warn: lint: no linter for yaml installed' >&2
  cat >/dev/null
fi
" \
    -v md_lint="
if command -v mdl >/dev/null 2>&1; then
  $batch_str mdl -s  setup/conf/mdlstyle.rb
else
  echo 'warn: lint: no linter for markdown installed' >&2
  cat >/dev/null
fi
" \
      -v verbose="$verbose" \
      -e '{
  switch ($2) {
  case /x-sh(ellscript)?/:
    print $1 | shell_lint
    break
  case /x-.*python/:
    print $1 | python_lint
    break
  case /x-ruby$/:
    print $1 | ruby_lint
    break
  case /json$/:
    print $1 | json_lint
    break
  case /yaml$/:
    print $1 | yaml_lint
    break
  case /markdown$/:
    print $1 | md_lint
    break
  case /^text\/plain$/:
    # Mime checkup failed, lets try a filepath match instead.
    found = 1
    switch ($1) {
      # Ideally your computer should have a mimetype setup for
      # this but seeing as mine doesnt I have to use this hack
      case /\.yml$/:
        print $1 | yaml_lint
        break
      case /\.md$|\.markdown$/:
        print $1 | md_lint
        break
      case /core\/autoload\/cmds\//:
        print $1 | shell_lint
        break
      default:
        found = 0
    }
    if (found)
      break # only break when linter found, otherwise try default.
  default:
    if (verbose)
      print("lint: error: unknown interpreter for linting (" $2 ") at path: " $1)
  }
}'
